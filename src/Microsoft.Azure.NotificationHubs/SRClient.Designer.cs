//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Azure.NotificationHubs {
    
    
    internal partial class SRClient {
        
        static System.Resources.ResourceManager resourceManager;
        
        static System.Globalization.CultureInfo resourceCulture;
        
        private SRClient() {
        }
        
        internal static System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceManager, null)) {
                    System.Resources.ResourceManager temp = new System.Resources.ResourceManager("Microsoft.Azure.NotificationHubs.SRClient", typeof(SRClient).Assembly);
                    resourceManager = temp;
                }
                return resourceManager;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("StrictResXFileCodeGenerator", "4.0.0.0")]
        internal static System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>Gets localized string like: This messaging entity is not in an open state.</summary>
        internal static string MessageEntityNotOpened {
            get {
                return ResourceManager.GetString("MessageEntityNotOpened", Culture);
            }
        }
        
        /// <summary>Gets localized string like: This messaging entity has already been closed, aborted, or disposed.</summary>
        internal static string MessageEntityDisposed {
            get {
                return ResourceManager.GetString("MessageEntityDisposed", Culture);
            }
        }
        
        /// <summary>Gets localized string like: This event data instance has already been disposed.</summary>
        internal static string EventDataDisposed {
            get {
                return ResourceManager.GetString("EventDataDisposed", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The message body cannot be read multiple times. To reuse it store the value after reading.</summary>
        internal static string MessageBodyConsumed {
            get {
                return ResourceManager.GetString("MessageBodyConsumed", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The XML returned is not in the expected format.</summary>
        internal static string InvalidXmlFormat {
            get {
                return ResourceManager.GetString("InvalidXmlFormat", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The buffer has already been reclaimed.</summary>
        internal static string BufferAlreadyReclaimed {
            get {
                return ResourceManager.GetString("BufferAlreadyReclaimed", Culture);
            }
        }
        
        /// <summary>Gets localized string like: A received message cannot be directly sent to another entity. Construct a new message object instead.</summary>
        internal static string CannotSendReceivedMessage {
            get {
                return ResourceManager.GetString("CannotSendReceivedMessage", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The only supported IsolationLevel is 'IsolationLevel.Serializable'.</summary>
        internal static string IsolationLevelNotSupported {
            get {
                return ResourceManager.GetString("IsolationLevelNotSupported", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The message body is null.</summary>
        internal static string MessageBodyNull {
            get {
                return ResourceManager.GetString("MessageBodyNull", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Reading is not supported on this stream.</summary>
        internal static string ReadNotSupported {
            get {
                return ResourceManager.GetString("ReadNotSupported", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Seeking is not supported on this stream.</summary>
        internal static string SeekNotSupported {
            get {
                return ResourceManager.GetString("SeekNotSupported", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The value of this argument must be non-negative.</summary>
        internal static string ValueMustBeNonNegative {
            get {
                return ResourceManager.GetString("ValueMustBeNonNegative", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Failed to serialize the message because its body stream has been partially consumed.</summary>
        internal static string CannotSerializeMessageWithPartiallyConsumedBodyStream {
            get {
                return ResourceManager.GetString("CannotSerializeMessageWithPartiallyConsumedBodyStream", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Failed to serialize the message because the number of bytes read from its body stream did not match the expected length.</summary>
        internal static string FailedToSerializeEntireBodyStream {
            get {
                return ResourceManager.GetString("FailedToSerializeEntireBodyStream", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Failed to deserialize the message because the number of bytes read from its body stream did not match the expected length.</summary>
        internal static string FailedToDeSerializeEntireBodyStream {
            get {
                return ResourceManager.GetString("FailedToDeSerializeEntireBodyStream", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Failed to serialize the session state because its state stream has been partially consumed.</summary>
        internal static string CannotSerializeSessionStateWithPartiallyConsumedStream {
            get {
                return ResourceManager.GetString("CannotSerializeSessionStateWithPartiallyConsumedStream", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Failed to serialize the session state because the number of bytes read from its state stream did not match the expected length.</summary>
        internal static string FailedToSerializeEntireSessionStateStream {
            get {
                return ResourceManager.GetString("FailedToSerializeEntireSessionStateStream", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Failed to deserialize the session state because the number of bytes read from its state stream did not match the expected length.</summary>
        internal static string FailedToDeSerializeEntireSessionStateStream {
            get {
                return ResourceManager.GetString("FailedToDeSerializeEntireSessionStateStream", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Sbmp</summary>
        internal static string SbmpTransport {
            get {
                return ResourceManager.GetString("SbmpTransport", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Local transactions are not supported with other resource managers/DTC.</summary>
        internal static string MultipleResourceManagersNotSupported {
            get {
                return ResourceManager.GetString("MultipleResourceManagersNotSupported", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Internal Server Error: The server did not provide a meaningful reply; this might be caused by a premature session shutdown.</summary>
        internal static string ServerDidNotReply {
            get {
                return ResourceManager.GetString("ServerDidNotReply", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Cannot directly create a client on a sub-queue. Create a client on the main queue and use that to create receivers on the appropriate sub-queue.</summary>
        internal static string CannotCreateClientOnSubQueue {
            get {
                return ResourceManager.GetString("CannotCreateClientOnSubQueue", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Cannot perform this operation on a session browser.</summary>
        internal static string InvalidOperationOnSessionBrowser {
            get {
                return ResourceManager.GetString("InvalidOperationOnSessionBrowser", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The BatchFlushInterval that is specified in the settings is not valid.</summary>
        internal static string InvalidBatchFlushInterval {
            get {
                return ResourceManager.GetString("InvalidBatchFlushInterval", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The filter expression computation time exceeded the allowed value. Reduce the complexity of the expression.</summary>
        internal static string FilterExpressionTooComplex {
            get {
                return ResourceManager.GetString("FilterExpressionTooComplex", Culture);
            }
        }
        
        /// <summary>Gets localized string like: This operation is only supported for a message receiver in 'PeekLock' receive mode.</summary>
        internal static string PeekLockModeRequired {
            get {
                return ResourceManager.GetString("PeekLockModeRequired", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The action must be processed.</summary>
        internal static string ActionMustBeProcessed {
            get {
                return ResourceManager.GetString("ActionMustBeProcessed", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The filter must be processed.</summary>
        internal static string FilterMustBeProcessed {
            get {
                return ResourceManager.GetString("FilterMustBeProcessed", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The operation cannot be performed because the entity has been closed or aborted.</summary>
        internal static string EntityClosedOrAborted {
            get {
                return ResourceManager.GetString("EntityClosedOrAborted", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Error during communication with Service Bus. Check the connection information, then retry.</summary>
        internal static string MessagingCommunicationError {
            get {
                return ResourceManager.GetString("MessagingCommunicationError", Culture);
            }
        }
        
        /// <summary>Gets localized string like: This asynchronous operation was aborted because the overall batching operation was aborted.</summary>
        internal static string BatchManagerAborted {
            get {
                return ResourceManager.GetString("BatchManagerAborted", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Cannot create a MessageSession for a sub-queue.</summary>
        internal static string CannotCreateMessageSessionForSubQueue {
            get {
                return ResourceManager.GetString("CannotCreateMessageSessionForSubQueue", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Use overload which allows specifying a base address.</summary>
        internal static string UseOverloadWithBaseAddress {
            get {
                return ResourceManager.GetString("UseOverloadWithBaseAddress", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Filter property must be set to a valid FilterTemplate instance.</summary>
        internal static string RuleCreationActionRequiresFilterTemplate {
            get {
                return ResourceManager.GetString("RuleCreationActionRequiresFilterTemplate", Culture);
            }
        }
        
        /// <summary>Gets localized string like: At least one system or user property must be set for a correlation filter.</summary>
        internal static string EmptyPropertyInCorrelationFilter {
            get {
                return ResourceManager.GetString("EmptyPropertyInCorrelationFilter", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The usage of RefcountedCommunicationObject is invalid.</summary>
        internal static string InvalidRefcountedCommunicationObject {
            get {
                return ResourceManager.GetString("InvalidRefcountedCommunicationObject", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Invalid state-machine in RefcountedCommunicationObject.</summary>
        internal static string InvalidStateMachineRefcountedCommunicationObject {
            get {
                return ResourceManager.GetString("InvalidStateMachineRefcountedCommunicationObject", Culture);
            }
        }
        
        /// <summary>Gets localized string like: ConnectionStatusBehavior requires an IChannelListener that exposes IConnectionStatus.</summary>
        internal static string ConnectionStatusBehavior {
            get {
                return ResourceManager.GetString("ConnectionStatusBehavior", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The Stream was closed.</summary>
        internal static string StreamClosed {
            get {
                return ResourceManager.GetString("StreamClosed", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Invalid Call.</summary>
        internal static string InvalidCallFaultException {
            get {
                return ResourceManager.GetString("InvalidCallFaultException", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Maximum connect attempts exceeded.</summary>
        internal static string MaximumAttemptsExceeded {
            get {
                return ResourceManager.GetString("MaximumAttemptsExceeded", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Connect process failed.</summary>
        internal static string ConnectFailed {
            get {
                return ResourceManager.GetString("ConnectFailed", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The ID is invalid.</summary>
        internal static string InvalidID {
            get {
                return ResourceManager.GetString("InvalidID", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Endpoint not found.</summary>
        internal static string EndpointNotFound {
            get {
                return ResourceManager.GetString("EndpointNotFound", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Duplicate connection ID.</summary>
        internal static string DuplicateConnectionID {
            get {
                return ResourceManager.GetString("DuplicateConnectionID", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The buffer size is invalid.</summary>
        internal static string InvalidBufferSize {
            get {
                return ResourceManager.GetString("InvalidBufferSize", Culture);
            }
        }
        
        /// <summary>Gets localized string like: listener.Type length exceeds maximum allowed.</summary>
        internal static string ListenerLengthArgumentOutOfRange {
            get {
                return ResourceManager.GetString("ListenerLengthArgumentOutOfRange", Culture);
            }
        }
        
        /// <summary>Gets localized string like: CredentialType is either unrecognized or unable to create HTTP authorization token.</summary>
        internal static string UnrecognizedCredentialType {
            get {
                return ResourceManager.GetString("UnrecognizedCredentialType", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Unable to retrieve the LockedMessageInfo property from message.</summary>
        internal static string LockedMessageInfo {
            get {
                return ResourceManager.GetString("LockedMessageInfo", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Policy is read-only.</summary>
        internal static string ReadOnlyPolicy {
            get {
                return ResourceManager.GetString("ReadOnlyPolicy", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Endpoint not found.</summary>
        internal static string EndpointNotFoundFault {
            get {
                return ResourceManager.GetString("EndpointNotFoundFault", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Duplicate connection ID.</summary>
        internal static string DuplicateConnectionIDFault {
            get {
                return ResourceManager.GetString("DuplicateConnectionIDFault", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Invalid configuration. Unable to use transport protection with Hybrid mode.</summary>
        internal static string InvalidConfiguration {
            get {
                return ResourceManager.GetString("InvalidConfiguration", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Transport security is required to protect the security token. The URI schema must be set to HTTPS.</summary>
        internal static string TransportSecurity {
            get {
                return ResourceManager.GetString("TransportSecurity", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The token provider does not support HTTP authorization token.</summary>
        internal static string HTTPAuthTokenNotSupportedException {
            get {
                return ResourceManager.GetString("HTTPAuthTokenNotSupportedException", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The message has an unexpected format other than SOAP and HTTP.</summary>
        internal static string UnexpectedFormat {
            get {
                return ResourceManager.GetString("UnexpectedFormat", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Invalid channel type.</summary>
        internal static string InvalidChannelType {
            get {
                return ResourceManager.GetString("InvalidChannelType", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Incompatible channel listener settings.</summary>
        internal static string IncompatibleChannelListener {
            get {
                return ResourceManager.GetString("IncompatibleChannelListener", Culture);
            }
        }
        
        /// <summary>Gets localized string like: SamlCredential and its SamlToken cannot be null or empty.</summary>
        internal static string NullSAMLs {
            get {
                return ResourceManager.GetString("NullSAMLs", Culture);
            }
        }
        
        /// <summary>Gets localized string like: stsUri must end with a '/'.</summary>
        internal static string STSURIFormat {
            get {
                return ResourceManager.GetString("STSURIFormat", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Parameter 'issuerName' cannot be null or empty.</summary>
        internal static string NullIssuerName {
            get {
                return ResourceManager.GetString("NullIssuerName", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Parameter 'issuerSecret' cannot be null or empty.</summary>
        internal static string NullIssuerSecret {
            get {
                return ResourceManager.GetString("NullIssuerSecret", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The 'issuerSecret' is invalid.</summary>
        internal static string InvalidIssuerSecret {
            get {
                return ResourceManager.GetString("InvalidIssuerSecret", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The provided token does not specify the 'ExpiresOn' value.</summary>
        internal static string TokenExpiresOn {
            get {
                return ResourceManager.GetString("TokenExpiresOn", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The string has an invalid encoding format.</summary>
        internal static string InvalidEncoding {
            get {
                return ResourceManager.GetString("InvalidEncoding", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The string has an unsupported encoding type.</summary>
        internal static string UnsupportedEncodingType {
            get {
                return ResourceManager.GetString("UnsupportedEncodingType", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Parameter 'simpleWebToken' cannot be null or empty.</summary>
        internal static string NullSimpleWebToken {
            get {
                return ResourceManager.GetString("NullSimpleWebToken", Culture);
            }
        }
        
        /// <summary>Gets localized string like: 'value' must be at least 1.</summary>
        internal static string ArgumentOutOfRangeLessThanOne {
            get {
                return ResourceManager.GetString("ArgumentOutOfRangeLessThanOne", Culture);
            }
        }
        
        /// <summary>Gets localized string like: This TokenProvider does not support BeginGetWebToken call.</summary>
        internal static string BeginGetWebTokenNotSupported {
            get {
                return ResourceManager.GetString("BeginGetWebTokenNotSupported", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Parameter appliesTo cannot be null or empty.</summary>
        internal static string NullAppliesTo {
            get {
                return ResourceManager.GetString("NullAppliesTo", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Hostname cannot be null or empty.</summary>
        internal static string NullHostname {
            get {
                return ResourceManager.GetString("NullHostname", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The timeout is too large.</summary>
        internal static string TimeoutExceeded {
            get {
                return ResourceManager.GetString("TimeoutExceeded", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The pump is already running.</summary>
        internal static string AlreadyRunning {
            get {
                return ResourceManager.GetString("AlreadyRunning", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Cannot find relay certificate.</summary>
        internal static string RelayCertificateNotFound {
            get {
                return ResourceManager.GetString("RelayCertificateNotFound", Culture);
            }
        }
        
        /// <summary>Gets localized string like: A request from the client instance has exceeded the maximum message size, and the underlying channel will be recreated. Validate the content size before retrying.</summary>
        internal static string MessageSizeExceeded {
            get {
                return ResourceManager.GetString("MessageSizeExceeded", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Did not receive any bytes from expected read.</summary>
        internal static string ExpectedBytesNotRead {
            get {
                return ResourceManager.GetString("ExpectedBytesNotRead", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Unable to connect to Service Bus using HTTP connectivity mode.</summary>
        internal static string HTTPConnectivityMode {
            get {
                return ResourceManager.GetString("HTTPConnectivityMode", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Unable to connect downstream.</summary>
        internal static string DownstreamConnection {
            get {
                return ResourceManager.GetString("DownstreamConnection", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Unable to close connection.</summary>
        internal static string ConnectionTermination {
            get {
                return ResourceManager.GetString("ConnectionTermination", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Unable to connect upstream.</summary>
        internal static string UpstreamConnection {
            get {
                return ResourceManager.GetString("UpstreamConnection", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Error creating endpoint Uri for connecting to the Service Bus.</summary>
        internal static string URIEndpoint {
            get {
                return ResourceManager.GetString("URIEndpoint", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Faulty response from factory endpoint - locations were not returned.</summary>
        internal static string FaultyEndpointResponse {
            get {
                return ResourceManager.GetString("FaultyEndpointResponse", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Unable to connect to factory endpoint.</summary>
        internal static string FactoryEndpoint {
            get {
                return ResourceManager.GetString("FactoryEndpoint", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The web stream has been shut down - can no longer write to the stream.</summary>
        internal static string WebStreamShutdown {
            get {
                return ResourceManager.GetString("WebStreamShutdown", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Cannot set the value at this time.</summary>
        internal static string ValueVisibility {
            get {
                return ResourceManager.GetString("ValueVisibility", Culture);
            }
        }
        
        /// <summary>Gets localized string like: More than one relay 'connection-mode' assertion was found.</summary>
        internal static string MultipleConnectionModeAssertions {
            get {
                return ResourceManager.GetString("MultipleConnectionModeAssertions", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Unsupported ITokenProvider type.</summary>
        internal static string ITokenProviderType {
            get {
                return ResourceManager.GetString("ITokenProviderType", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Manually issuing credit on a link with auto-flow enabled is not allowed.</summary>
        internal static string EnabledAutoFlowCreditIssuing {
            get {
                return ResourceManager.GetString("EnabledAutoFlowCreditIssuing", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The list size must be exactly the same as the encoded value length.</summary>
        internal static string MismatchedListSizeEncodedValueLength {
            get {
                return ResourceManager.GetString("MismatchedListSizeEncodedValueLength", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Message listener is already registered.</summary>
        internal static string MessageListenerAlreadyRegistered {
            get {
                return ResourceManager.GetString("MessageListenerAlreadyRegistered", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Credit listener is already registered.</summary>
        internal static string CreditListenerAlreadyRegistered {
            get {
                return ResourceManager.GetString("CreditListenerAlreadyRegistered", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Disposition listener is already registered.</summary>
        internal static string DispositionListenerAlreadyRegistered {
            get {
                return ResourceManager.GetString("DispositionListenerAlreadyRegistered", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Not supported when the disposition listener is set.</summary>
        internal static string DispositionListenerSetNotSupported {
            get {
                return ResourceManager.GetString("DispositionListenerSetNotSupported", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Cannot set target host because the server certificate is already set.</summary>
        internal static string ServerCertificateAlreadySet {
            get {
                return ResourceManager.GetString("ServerCertificateAlreadySet", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Cannot set server certificate because the client target host is already set.</summary>
        internal static string ClientTargetHostAlreadySet {
            get {
                return ResourceManager.GetString("ClientTargetHostAlreadySet", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Either the client target host or the server certificate must be set.</summary>
        internal static string ClientTargetHostServerCertificateNotSet {
            get {
                return ResourceManager.GetString("ClientTargetHostServerCertificateNotSet", Culture);
            }
        }
        
        /// <summary>Gets localized string like: TargetHost must be set.</summary>
        internal static string TargetHostNotSet {
            get {
                return ResourceManager.GetString("TargetHostNotSet", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Service certificate must be set.</summary>
        internal static string ServerCertificateNotSet {
            get {
                return ResourceManager.GetString("ServerCertificateNotSet", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The asynchronous result is still in use.</summary>
        internal static string AsyncResultInUse {
            get {
                return ResourceManager.GetString("AsyncResultInUse", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The asynchronous result is different.</summary>
        internal static string AsyncResultDifferent {
            get {
                return ResourceManager.GetString("AsyncResultDifferent", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The asynchronous result is not in use.</summary>
        internal static string AsyncResultNotInUse {
            get {
                return ResourceManager.GetString("AsyncResultNotInUse", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Resource descriptions is null or empty.</summary>
        internal static string NullResourceDescription {
            get {
                return ResourceManager.GetString("NullResourceDescription", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Resource names is null or empty.</summary>
        internal static string NullResourceName {
            get {
                return ResourceManager.GetString("NullResourceName", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Service namespace cannot be null or empty.</summary>
        internal static string NullServiceNameSpace {
            get {
                return ResourceManager.GetString("NullServiceNameSpace", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Path segments in 'servicePath' can only contain ASCII characters.</summary>
        internal static string PathSegmentASCIICharacters {
            get {
                return ResourceManager.GetString("PathSegmentASCIICharacters", Culture);
            }
        }
        
        /// <summary>Gets localized string like: A SystemTracker header was not present.</summary>
        internal static string SystemTrackerHeaderMissing {
            get {
                return ResourceManager.GetString("SystemTrackerHeaderMissing", Culture);
            }
        }
        
        /// <summary>Gets localized string like: A SystemTracker property was not present.</summary>
        internal static string SystemTrackerPropertyMissing {
            get {
                return ResourceManager.GetString("SystemTrackerPropertyMissing", Culture);
            }
        }
        
        /// <summary>Gets localized string like: A TrackingID header was not present.</summary>
        internal static string TrackingIDHeaderMissing {
            get {
                return ResourceManager.GetString("TrackingIDHeaderMissing", Culture);
            }
        }
        
        /// <summary>Gets localized string like: A TrackingID property was not present.</summary>
        internal static string TrackingIDPropertyMissing {
            get {
                return ResourceManager.GetString("TrackingIDPropertyMissing", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The lock supplied is invalid. Either the lock expired, or the message has already been removed from the queue.</summary>
        internal static string MessageLockLost {
            get {
                return ResourceManager.GetString("MessageLockLost", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The session lock has expired on the MessageSession. Accept a new MessageSession.</summary>
        internal static string SessionLockExpiredOnMessageSession {
            get {
                return ResourceManager.GetString("SessionLockExpiredOnMessageSession", Culture);
            }
        }
        
        /// <summary>Gets localized string like: IOThreadTimer cannot accept Timespan.MaxValue.</summary>
        internal static string IOThreadTimerCannotAcceptMaxTimeSpan {
            get {
                return ResourceManager.GetString("IOThreadTimerCannotAcceptMaxTimeSpan", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Socket communication error.</summary>
        internal static string ConnectFailedCommunicationException {
            get {
                return ResourceManager.GetString("ConnectFailedCommunicationException", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Can't create session when the connection is closing.</summary>
        internal static string CreateSessionOnClosingConnection {
            get {
                return ResourceManager.GetString("CreateSessionOnClosingConnection", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Failed to convert to a char.</summary>
        internal static string ErroConvertingToChar {
            get {
                return ResourceManager.GetString("ErroConvertingToChar", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The length of received content is not correct.</summary>
        internal static string InvalidLengthofReceivedContent {
            get {
                return ResourceManager.GetString("InvalidLengthofReceivedContent", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Received empty content or invalid type of content.</summary>
        internal static string InvalidReceivedContent {
            get {
                return ResourceManager.GetString("InvalidReceivedContent", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The session id from received content does not match.</summary>
        internal static string InvalidReceivedSessionId {
            get {
                return ResourceManager.GetString("InvalidReceivedSessionId", Culture);
            }
        }
        
        /// <summary>Gets localized string like: More than one address candidate exists for the given type.</summary>
        internal static string MoreThanOneAddressCandidate {
            get {
                return ResourceManager.GetString("MoreThanOneAddressCandidate", Culture);
            }
        }
        
        /// <summary>Gets localized string like: More than one IPEndPoint exists for the given type.</summary>
        internal static string MoreThanOneIPEndPoint {
            get {
                return ResourceManager.GetString("MoreThanOneIPEndPoint", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Given type of channel is not supported.</summary>
        internal static string NotSupportedTypeofChannel {
            get {
                return ResourceManager.GetString("NotSupportedTypeofChannel", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Can't find appropriate address.</summary>
        internal static string NoValidHostAddress {
            get {
                return ResourceManager.GetString("NoValidHostAddress", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Can't read raw data from token.</summary>
        internal static string NullRawDataInToken {
            get {
                return ResourceManager.GetString("NullRawDataInToken", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The root is null.</summary>
        internal static string NullRoot {
            get {
                return ResourceManager.GetString("NullRoot", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The method 'OnMessage' or 'OnMessageAsync' has already been called.</summary>
        internal static string OnMessageAlreadyCalled {
            get {
                return ResourceManager.GetString("OnMessageAlreadyCalled", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The server was unable to process the request; please retry the operation. If the problem persists, please contact your Service Bus administrator and provide the tracking id.</summary>
        internal static string InternalServerError {
            get {
                return ResourceManager.GetString("InternalServerError", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Manage permission should also include Send and Listen.</summary>
        internal static string InvalidCombinationOfManageRight {
            get {
                return ResourceManager.GetString("InvalidCombinationOfManageRight", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The AccessRights on an Authorization Rule must be unique.</summary>
        internal static string CannotHaveDuplicateAccessRights {
            get {
                return ResourceManager.GetString("CannotHaveDuplicateAccessRights", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The bodyTemplate is not in accepted XML format. The first node of the bodyTemplate should be Badge/Tile/Toast, except wns/raw template, which need to be a valid XML.</summary>
        internal static string NotSupportedXMLFormatAsBodyTemplate {
            get {
                return ResourceManager.GetString("NotSupportedXMLFormatAsBodyTemplate", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The payload is not in accepted XML format. The first node should be Badge/Tile/Toast. If want to send raw notification, please set header to wns/raw.</summary>
        internal static string NotSupportedXMLFormatAsPayload {
            get {
                return ResourceManager.GetString("NotSupportedXMLFormatAsPayload", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Connection string contains unsupported schema for endPoint. Only "sb://" is supported.</summary>
        internal static string ConnectionStringWithInvalidScheme {
            get {
                return ResourceManager.GetString("ConnectionStringWithInvalidScheme", Culture);
            }
        }
        
        /// <summary>Gets localized string like: This TokenProvider does not support changing the Token Scope.</summary>
        internal static string SetTokenScopeNotSupported {
            get {
                return ResourceManager.GetString("SetTokenScopeNotSupported", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Each Shared Access Authorization Rule key name must be unique.</summary>
        internal static string CannotHaveDuplicateSAARule {
            get {
                return ResourceManager.GetString("CannotHaveDuplicateSAARule", Culture);
            }
        }
        
        /// <summary>Gets localized string like: PairNamespace can only be called once per MessagingFactory.</summary>
        internal static string PairedNamespaceOnlyCallOnce {
            get {
                return ResourceManager.GetString("PairedNamespaceOnlyCallOnce", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The secondary MessagingFactory inside the pairing option has already been paired to another MessagingFactory.</summary>
        internal static string PairedNamespaceMessagingFactoryAlreadyPaired {
            get {
                return ResourceManager.GetString("PairedNamespaceMessagingFactoryAlreadyPaired", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The MessagingFactory in the paired namespace option should not have any paired namespace option defined in itself.</summary>
        internal static string PairedNamespaceMessagingFactoryInOptionsAlreadyPaired {
            get {
                return ResourceManager.GetString("PairedNamespaceMessagingFactoryInOptionsAlreadyPaired", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Cannot change the MessagingFactory once it has been set.</summary>
        internal static string PairedNamespaceMessagingFactoyCannotBeChanged {
            get {
                return ResourceManager.GetString("PairedNamespaceMessagingFactoyCannotBeChanged", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The message appears to have been placed in a backlog queue by an agent that does not use the SendAvailability feature in the Service Bus SDK. Please do not use this queue for general scenarios.</summary>
        internal static string BacklogDeadletterDescriptionNoQueuePath {
            get {
                return ResourceManager.GetString("BacklogDeadletterDescriptionNoQueuePath", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Destination queue not indicated in message when fetched from backlog.</summary>
        internal static string BacklogDeadletterReasonNoQueuePath {
            get {
                return ResourceManager.GetString("BacklogDeadletterReasonNoQueuePath", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The message cannot be delivered to the destination.</summary>
        internal static string BacklogDeadletterReasonNotRetryable {
            get {
                return ResourceManager.GetString("BacklogDeadletterReasonNotRetryable", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Send availability is not supported because no transfer queues were created or found.</summary>
        internal static string SendAvailabilityNoTransferQueuesCreated {
            get {
                return ResourceManager.GetString("SendAvailabilityNoTransferQueuesCreated", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The backlog queue cannot be empty.</summary>
        internal static string PairedNamespaceInvalidBacklogQueueCount {
            get {
                return ResourceManager.GetString("PairedNamespaceInvalidBacklogQueueCount", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The primary and secondary paired namespaces are identical. The code must use different namespaces.</summary>
        internal static string PairedNamespacePrimaryAndSecondaryEqual {
            get {
                return ResourceManager.GetString("PairedNamespacePrimaryAndSecondaryEqual", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Valid range is 1 to 30 minutes.</summary>
        internal static string PairedNamespaceValidTimespanRange {
            get {
                return ResourceManager.GetString("PairedNamespaceValidTimespanRange", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The entity was created with a paired namespace. Ping detected that this entity is unreachable due to a non-transient error. The message will not be sent to the paired namespace. See the inner exception for more details.</summary>
        internal static string PairedNamespacePrimaryEntityUnreachable {
            get {
                return ResourceManager.GetString("PairedNamespacePrimaryEntityUnreachable", Culture);
            }
        }
        
        /// <summary>Gets localized string like: (null)</summary>
        internal static string NullAsString {
            get {
                return ResourceManager.GetString("NullAsString", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Invalid type in property.</summary>
        internal static string PairedNamespacePropertyExtractionDlqReason {
            get {
                return ResourceManager.GetString("PairedNamespacePropertyExtractionDlqReason", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Expression type '$body' is not supported.</summary>
        internal static string BodyIsNotSupportedExpression {
            get {
                return ResourceManager.GetString("BodyIsNotSupportedExpression", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The certificate specified in apple credentials is expired.</summary>
        internal static string ApnsCertificateExpired {
            get {
                return ResourceManager.GetString("ApnsCertificateExpired", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The certificate specified in apple credentials is not valid yet.</summary>
        internal static string ApnsCertificateNotValid {
            get {
                return ResourceManager.GetString("ApnsCertificateNotValid", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The certificate specified in apple credentials does not have a private key.</summary>
        internal static string ApnsCertificatePrivatekeyMissing {
            get {
                return ResourceManager.GetString("ApnsCertificatePrivatekeyMissing", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The specified APNS Endpoint is not allowed.</summary>
        internal static string ApnsEndpointNotAllowed {
            get {
                return ResourceManager.GetString("ApnsEndpointNotAllowed", Culture);
            }
        }
        
        /// <summary>Gets localized string like: A valid endpoint for APNS is required.</summary>
        internal static string ApnsEndpointNotSpecified {
            get {
                return ResourceManager.GetString("ApnsEndpointNotSpecified", Culture);
            }
        }
        
        /// <summary>Gets localized string like: A valid set of token credentials or certificate credentials are needed.</summary>
        internal static string ApnsPropertiesNotSpecified {
            get {
                return ResourceManager.GetString("ApnsPropertiesNotSpecified", Culture);
            }
        }
        
        /// <summary>Gets localized string like: APNS Credential properties missing.</summary>
        internal static string ApnsRequiredPropertiesError {
            get {
                return ResourceManager.GetString("ApnsRequiredPropertiesError", Culture);
            }
        }
        
        /// <summary>Gets localized string like: To use a certificate as the APNS credentials a CertificateKey, ApnsCertificate and Endpoint are required.</summary>
        internal static string ApnsCertificateRequiredPropertiesError {
            get {
                return ResourceManager.GetString("ApnsCertificateRequiredPropertiesError", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Cannot specify ExpirationTime.</summary>
        internal static string CannotSpecifyExpirationTime {
            get {
                return ResourceManager.GetString("CannotSpecifyExpirationTime", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Channel URI is either null, empty or not absolute value.</summary>
        internal static string ChannelUriNullOrEmpty {
            get {
                return ResourceManager.GetString("ChannelUriNullOrEmpty", Culture);
            }
        }
        
        /// <summary>Gets localized string like: One or more characters in device token is not a hexadecimal digit.</summary>
        internal static string DeviceTokenHexaDecimalDigitError {
            get {
                return ResourceManager.GetString("DeviceTokenHexaDecimalDigitError", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Device token is either empty OR it has odd number of nibbles.</summary>
        internal static string DeviceTokenIsEmpty {
            get {
                return ResourceManager.GetString("DeviceTokenIsEmpty", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Expiry value is empty. When specified, a valid expiry value is required.</summary>
        internal static string EmptyExpiryValue {
            get {
                return ResourceManager.GetString("EmptyExpiryValue", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Expiry value could not be deserialized to a date time.</summary>
        internal static string ExpiryDeserializationError {
            get {
                return ResourceManager.GetString("ExpiryDeserializationError", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Failed to deserialize the body template.</summary>
        internal static string FailedToDeserializeBodyTemplate {
            get {
                return ResourceManager.GetString("FailedToDeserializeBodyTemplate", Culture);
            }
        }
        
        /// <summary>Gets localized string like: GcmEndpoint is either not specified or invalid.</summary>
        internal static string GcmEndpointNotSpecified {
            get {
                return ResourceManager.GetString("GcmEndpointNotSpecified", Culture);
            }
        }
        
        /// <summary>Gets localized string like: GCM Registration Id is invalid.</summary>
        internal static string GCMRegistrationInvalidId {
            get {
                return ResourceManager.GetString("GCMRegistrationInvalidId", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Only GoogleApiKey and GcmEndpoint are required.</summary>
        internal static string GcmRequiredProperties {
            get {
                return ResourceManager.GetString("GcmRequiredProperties", Culture);
            }
        }

        /// <summary>Gets localized string like: FCM Registration Id is invalid.</summary>
        internal static string FCMRegistrationInvalidId {
            get {
                return ResourceManager.GetString("FCMRegistrationInvalidId", Culture);
            }
        }
        
        /// <summary>Gets localized string like: GoogleApiKey is either not specified or invalid.</summary>
        internal static string GoogleApiKeyNotSpecified {
            get {
                return ResourceManager.GetString("GoogleApiKeyNotSpecified", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Invalid GcmEndpoint specified.</summary>
        internal static string InvalidGcmEndpoint {
            get {
                return ResourceManager.GetString("InvalidGcmEndpoint", Culture);
            }
        }
        
        /// <summary>Gets localized string like: NokiaXEndpoint is either not specified or invalid.</summary>
        internal static string NokiaXEndpointNotSpecified {
            get {
                return ResourceManager.GetString("NokiaXEndpointNotSpecified", Culture);
            }
        }
        
        /// <summary>Gets localized string like: NokiaX Registration Id is invalid.</summary>
        internal static string NokiaXRegistrationInvalidId {
            get {
                return ResourceManager.GetString("NokiaXRegistrationInvalidId", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Only authorization key and NokiaXEndpoint are required.</summary>
        internal static string NokiaXRequiredProperties {
            get {
                return ResourceManager.GetString("NokiaXRequiredProperties", Culture);
            }
        }
        
        /// <summary>Gets localized string like: NokiaX Authorization Key is either not specified or invalid.</summary>
        internal static string NokiaXAuthorizationKeyNotSpecified {
            get {
                return ResourceManager.GetString("NokiaXAuthorizationKeyNotSpecified", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Invalid NokiaXEndpoint specified.</summary>
        internal static string InvalidNokiaXEndpoint {
            get {
                return ResourceManager.GetString("InvalidNokiaXEndpoint", Culture);
            }
        }
        
        /// <summary>Gets localized string like: BaiduEndpoint is either not specified or invalid. </summary>
        internal static string BaiduEndpointNotSpecified {
            get {
                return ResourceManager.GetString("BaiduEndpointNotSpecified", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Baidu Registration Id is invalid.</summary>
        internal static string BaiduRegistrationInvalidId {
            get {
                return ResourceManager.GetString("BaiduRegistrationInvalidId", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Only API key and NokiaXEndpoint are required.</summary>
        internal static string BaiduRequiredProperties {
            get {
                return ResourceManager.GetString("BaiduRequiredProperties", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Baidu Api Key is either not specified or invalid.</summary>
        internal static string BaiduApiKeyNotSpecified {
            get {
                return ResourceManager.GetString("BaiduApiKeyNotSpecified", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Invalid BaiduEndpoint specified.</summary>
        internal static string InvalidBaiduEndpoint {
            get {
                return ResourceManager.GetString("InvalidBaiduEndpoint", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Invalid WindowsLiveEndpoint specified.</summary>
        internal static string InvalidWindowsLiveEndpoint {
            get {
                return ResourceManager.GetString("InvalidWindowsLiveEndpoint", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Only 2 properties PackageSid and SecretKey are required.</summary>
        internal static string PackageSidAndSecretKeyAreRequired {
            get {
                return ResourceManager.GetString("PackageSidAndSecretKeyAreRequired", Culture);
            }
        }
        
        /// <summary>Gets localized string like: PackageSid or SecretKey is either not specified or invalid"</summary>
        internal static string PackageSidOrSecretKeyInvalid {
            get {
                return ResourceManager.GetString("PackageSidOrSecretKeyInvalid", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Token type '#(prop)' is not allowed in composite expression.</summary>
        internal static string PropTokenNotAllowedInCompositeExpr {
            get {
                return ResourceManager.GetString("PropTokenNotAllowedInCompositeExpr", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The bodyTemplate is not in accepted XML format. The first node of the bodyTemplate should be Tile/Toast, except raw template.</summary>
        internal static string NotSupportedXMLFormatAsBodyTemplateForMpns {
            get {
                return ResourceManager.GetString("NotSupportedXMLFormatAsBodyTemplateForMpns", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The payload is not in accepted XML format. The first node should be Tile/Toast. If want to send raw notification, please set "X-NotificationClass" to "3" in header.</summary>
        internal static string NotSupportedXMLFormatAsPayloadForMpns {
            get {
                return ResourceManager.GetString("NotSupportedXMLFormatAsPayloadForMpns", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The certificate specified in mpns credentials is not valid yet.</summary>
        internal static string InvalidMpnsCertificate {
            get {
                return ResourceManager.GetString("InvalidMpnsCertificate", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The certificate specified in mpns credentials is expired.</summary>
        internal static string MpnsCertificateExpired {
            get {
                return ResourceManager.GetString("MpnsCertificateExpired", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The certificate specified in mpns credentials does not have a private key.</summary>
        internal static string MpnsCertificatePrivatekeyMissing {
            get {
                return ResourceManager.GetString("MpnsCertificatePrivatekeyMissing", Culture);
            }
        }
        
        /// <summary>Gets localized string like: MpnsCertificate or CertificateKey is either not specified or invalid.</summary>
        internal static string MpnsInvalidPropeties {
            get {
                return ResourceManager.GetString("MpnsInvalidPropeties", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Only 2 properties MpnsCertificate and CertificateKey are required.</summary>
        internal static string MpnsRequiredPropertiesError {
            get {
                return ResourceManager.GetString("MpnsRequiredPropertiesError", Culture);
            }
        }
        
        /// <summary>Gets localized string like: PartitionKey must be equal to SessionId when SessionId has a value different than null. Assign null to SessionId to be able to set PartitionKey.</summary>
        internal static string PartitionKeyMustBeEqualsToNonNullSessionId {
            get {
                return ResourceManager.GetString("PartitionKeyMustBeEqualsToNonNullSessionId", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Batching brokered messages with distinct SessionId or PartitionKey is not supported for an entity with partitioning enabled.</summary>
        internal static string UnsupportedBatchingDistinctPartitionKey {
            get {
                return ResourceManager.GetString("UnsupportedBatchingDistinctPartitionKey", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Batching brokered messages with distinct SessionId, PartitionKey, or MessageId  is not supported for an entity with partitioning and duplicate detection enabled.</summary>
        internal static string UnsupportedDeDupBatchingDistinctPartitionKey {
            get {
                return ResourceManager.GetString("UnsupportedDeDupBatchingDistinctPartitionKey", Culture);
            }
        }
        
        /// <summary>Gets localized string like: PartitionKey or SessionId is missing. Transaction with partitioned entities require PartitionKey or SessionId to be set in the brokered message.</summary>
        internal static string TransactionPartitionKeyMissing {
            get {
                return ResourceManager.GetString("TransactionPartitionKeyMissing", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Sending message through a via message sender requires BrokeredMessage.ViaPartitionKey to be set.</summary>
        internal static string PartitionedEntityViaSenderNeedsViaPatitionKey {
            get {
                return ResourceManager.GetString("PartitionedEntityViaSenderNeedsViaPatitionKey", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Batching lock tokens for different partitions is not supported for an entity with partitioning enabled.</summary>
        internal static string MessagingPartitioningUnsupportedBatchingLockTockens {
            get {
                return ResourceManager.GetString("MessagingPartitioningUnsupportedBatchingLockTockens", Culture);
            }
        }
        
        /// <summary>Gets localized string like: ReceiveBatch of sequence numbers from different partitions is not supported for an entity with partitioning enabled. </summary>
        internal static string UnsupportedBatchingSequenceNumbersForDistinctPartitions {
            get {
                return ResourceManager.GetString("UnsupportedBatchingSequenceNumbersForDistinctPartitions", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The operation is not supported for an entity with partitioning enabled.</summary>
        internal static string MessagingPartitioningInvalidOperation {
            get {
                return ResourceManager.GetString("MessagingPartitioningInvalidOperation", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Invalid payload format. Either Json object or valid Xml are allowed.</summary>
        internal static string InvalidPayLoadFormat {
            get {
                return ResourceManager.GetString("InvalidPayLoadFormat", Culture);
            }
        }
        
        /// <summary>Gets localized string like: A session handler is already registered or being registered.</summary>
        internal static string SessionHandlerAlreadyRegistered {
            get {
                return ResourceManager.GetString("SessionHandlerAlreadyRegistered", Culture);
            }
        }
        
        /// <summary>Gets localized string like: AuthTokenUrl is invalid.</summary>
        internal static string InvalidAdmAuthTokenUrl {
            get {
                return ResourceManager.GetString("InvalidAdmAuthTokenUrl", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The message contain no data.</summary>
        internal static string ErrorNoCotent {
            get {
                return ResourceManager.GetString("ErrorNoCotent", Culture);
            }
        }
        
        /// <summary>Gets localized string like: EventHubDescription.Path must either be null or match EventHubClient.Path.</summary>
        internal static string EventHubPathMismatch {
            get {
                return ResourceManager.GetString("EventHubPathMismatch", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Cannot explicitly create receiver when using a EventHubProcessor is attached.</summary>
        internal static string CannotCreateReceiverWithDispatcher {
            get {
                return ResourceManager.GetString("CannotCreateReceiverWithDispatcher", Culture);
            }
        }
        
        /// <summary>Gets localized string like: ADM Registration Id is invalid.</summary>
        internal static string AdmRegistrationIdInvalid {
            get {
                return ResourceManager.GetString("AdmRegistrationIdInvalid", Culture);
            }
        }
        
        /// <summary>Gets localized string like: ADM send notification endpoint URL template is invalid.</summary>
        internal static string InvalidAdmSendUrlTemplate {
            get {
                return ResourceManager.GetString("InvalidAdmSendUrlTemplate", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The operation cannot be completed because the ReceiveContext is null.</summary>
        internal static string ReceiveContextNull {
            get {
                return ResourceManager.GetString("ReceiveContextNull", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The provided token does not specify the 'Audience' value.</summary>
        internal static string TokenAudience {
            get {
                return ResourceManager.GetString("TokenAudience", Culture);
            }
        }
        
        /// <summary>Gets localized string like: This object is read-only and cannot be modified.</summary>
        internal static string ObjectIsReadOnly {
            get {
                return ResourceManager.GetString("ObjectIsReadOnly", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Checkpoint is disabled for this ConsuemerGroup.</summary>
        internal static string CannotCheckpointWithCurrentConsumerGroup {
            get {
                return ResourceManager.GetString("CannotCheckpointWithCurrentConsumerGroup", Culture);
            }
        }
        
        /// <summary>Gets localized string like: PartitionKey must be equal to Publisher while sending from Publisher</summary>
        internal static string PartitionKeyMustBeEqualsToNonNullPublisher {
            get {
                return ResourceManager.GetString("PartitionKeyMustBeEqualsToNonNullPublisher", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Publisher must be equal to SessionId when SessionId has a Value</summary>
        internal static string PublisherMustBeEqualsToNonNullSessionId {
            get {
                return ResourceManager.GetString("PublisherMustBeEqualsToNonNullSessionId", Culture);
            }
        }
        
        /// <summary>Gets localized string like: This operation is not available for your tier</summary>
        internal static string NotificationHubOperationNotAllowedForSKU {
            get {
                return ResourceManager.GetString("NotificationHubOperationNotAllowedForSKU", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Unknown RegistrationDescription type.</summary>
        internal static string UnknownRegistrationDescriptionType {
            get {
                return ResourceManager.GetString("UnknownRegistrationDescriptionType", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Token type '#(prop)' is not allowed in composite expression.</summary>
        internal static string ExpressionHashInComposite {
            get {
                return ResourceManager.GetString("ExpressionHashInComposite", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Priority value is empty. When specified, a valid priority value is required.</summary>
        internal static string EmptyPriorityValue {
            get {
                return ResourceManager.GetString("EmptyPriorityValue", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Priority value could not be deserialized to a byte.</summary>
        internal static string PriorityDeserializationError {
            get {
                return ResourceManager.GetString("PriorityDeserializationError", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Cannot set both token and certificate for APNS.</summary>
        internal static string ApnsProvideOnlyOneCredentialType {
            get {
                return ResourceManager.GetString("ApnsProvideOnlyOneCredentialType", Culture);
            }
        }
        
        /// <summary>Gets localized string like: To use APNS token, the key id, application id and application name need to be set.</summary>
        internal static string ApnsTokenPropertiesMissing {
            get {
                return ResourceManager.GetString("ApnsTokenPropertiesMissing", Culture);
            }
        }
        
        /// <summary>Gets localized string like: APNS Header 'apns-expiration' is a unix epoch date expressed in ticks. It must be an integer.</summary>
        internal static string ApnsExpiryHeaderDeserializationError {
            get {
                return ResourceManager.GetString("ApnsExpiryHeaderDeserializationError", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The communication object, {0}, cannot be used because it is in a faulted state.</summary>
        /// <param name="param0">Parameter 0 for string: The communication object, {0}, cannot be used because it is in a faulted state.</param>
        internal static string CommunicationObjectFaulted(object param0) {
            return string.Format(Culture, ResourceManager.GetString("CommunicationObjectFaulted", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The entity path/name '{0}' exceeds the '{1}' character limit.</summary>
        /// <param name="param0">Parameter 0 for string: The entity path/name '{0}' exceeds the '{1}' character limit.</param>
        /// <param name="param1">Parameter 1 for string: The entity path/name '{0}' exceeds the '{1}' character limit.</param>
        internal static string EntityNameLengthExceedsLimit(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("EntityNameLengthExceedsLimit", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The template name exceeds the '{0}' character limit.</summary>
        /// <param name="param0">Parameter 0 for string: The template name exceeds the '{0}' character limit.</param>
        internal static string TemplateNameLengthExceedsLimit(object param0) {
            return string.Format(Culture, ResourceManager.GetString("TemplateNameLengthExceedsLimit", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The supplied lock time exceeds the allowed maximum of '{0}' minutes.</summary>
        /// <param name="param0">Parameter 0 for string: The supplied lock time exceeds the allowed maximum of '{0}' minutes.</param>
        internal static string LockTimeExceedsMaximumAllowed(object param0) {
            return string.Format(Culture, ResourceManager.GetString("LockTimeExceedsMaximumAllowed", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The supplied duplicate detection history duration exceeds the maximum allowed value of '{0}' minutes.</summary>
        /// <param name="param0">Parameter 0 for string: The supplied duplicate detection history duration exceeds the maximum allowed value of '{0}' minutes.</param>
        internal static string DuplicateHistoryExpiryTimeExceedsMaximumAllowed(object param0) {
            return string.Format(Culture, ResourceManager.GetString("DuplicateHistoryExpiryTimeExceedsMaximumAllowed", Culture), param0);
        }
        
        /// <summary>Gets localized string like: There was an error parsing the SQL expression. [Token line={0}, column={1}, Token in error= {2}]</summary>
        /// <param name="param0">Parameter 0 for string: There was an error parsing the SQL expression. [Token line={0}, column={1}, Token in error= {2}]</param>
        /// <param name="param1">Parameter 1 for string: There was an error parsing the SQL expression. [Token line={0}, column={1}, Token in error= {2}]</param>
        /// <param name="param2">Parameter 2 for string: There was an error parsing the SQL expression. [Token line={0}, column={1}, Token in error= {2}]</param>
        internal static string SQLSyntaxError(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("SQLSyntaxError", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: There was an error parsing the SQL expression. [Token line={0}, column={1}, Token in error= {2}, Additional details= {3}] </summary>
        /// <param name="param0">Parameter 0 for string: There was an error parsing the SQL expression. [Token line={0}, column={1}, Token in error= {2}, Additional details= {3}] </param>
        /// <param name="param1">Parameter 1 for string: There was an error parsing the SQL expression. [Token line={0}, column={1}, Token in error= {2}, Additional details= {3}] </param>
        /// <param name="param2">Parameter 2 for string: There was an error parsing the SQL expression. [Token line={0}, column={1}, Token in error= {2}, Additional details= {3}] </param>
        /// <param name="param3">Parameter 3 for string: There was an error parsing the SQL expression. [Token line={0}, column={1}, Token in error= {2}, Additional details= {3}] </param>
        internal static string SQLSyntaxErrorDetailed(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("SQLSyntaxErrorDetailed", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: The provided URI scheme '{0}' is invalid; expected '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: The provided URI scheme '{0}' is invalid; expected '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: The provided URI scheme '{0}' is invalid; expected '{1}'.</param>
        internal static string InvalidUriScheme(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("InvalidUriScheme", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The size quota for this stream ({0}) has been exceeded.</summary>
        /// <param name="param0">Parameter 0 for string: The size quota for this stream ({0}) has been exceeded.</param>
        internal static string BufferedOutputStreamQuotaExceeded(object param0) {
            return string.Format(Culture, ResourceManager.GetString("BufferedOutputStreamQuotaExceeded", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The messaging entity '{0}' already exists.</summary>
        /// <param name="param0">Parameter 0 for string: The messaging entity '{0}' already exists.</param>
        internal static string MessagingEntityAlreadyExists(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessagingEntityAlreadyExists", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The messaging entity '{0}' could not be found.</summary>
        /// <param name="param0">Parameter 0 for string: The messaging entity '{0}' could not be found.</param>
        internal static string MessagingEntityCouldNotBeFound(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessagingEntityCouldNotBeFound", Culture), param0);
        }
        
        /// <summary>Gets localized string like: An error occurred during communication with '{0}'. Check the connection information, then retry.</summary>
        /// <param name="param0">Parameter 0 for string: An error occurred during communication with '{0}'. Check the connection information, then retry.</param>
        internal static string MessagingEndpointCommunicationError(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessagingEndpointCommunicationError", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The specified channel type {0} is not supported by this channel manager.</summary>
        /// <param name="param0">Parameter 0 for string: The specified channel type {0} is not supported by this channel manager.</param>
        internal static string ChannelTypeNotSupported(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ChannelTypeNotSupported", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {1} binding does not have a configured binding named '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: The {1} binding does not have a configured binding named '{0}'.</param>
        /// <param name="param1">Parameter 1 for string: The {1} binding does not have a configured binding named '{0}'.</param>
        internal static string ConfigInvalidBindingConfigurationName(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ConfigInvalidBindingConfigurationName", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Could not resolve any addresses for entity '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Could not resolve any addresses for entity '{0}'.</param>
        internal static string NoAddressesFound(object param0) {
            return string.Format(Culture, ResourceManager.GetString("NoAddressesFound", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The operation cannot be performed because the brokered message '{0}' has already been consumed. Please use a new BrokeredMessage instance for the operation.</summary>
        /// <param name="param0">Parameter 0 for string: The operation cannot be performed because the brokered message '{0}' has already been consumed. Please use a new BrokeredMessage instance for the operation.</param>
        internal static string CannotUseSameMessageInstanceInMultipleOperations(object param0) {
            return string.Format(Culture, ResourceManager.GetString("CannotUseSameMessageInstanceInMultipleOperations", Culture), param0);
        }
        
        /// <summary>Gets localized string like: A message cannot have more than '{0}' properties. Found '{1}' properties.</summary>
        /// <param name="param0">Parameter 0 for string: A message cannot have more than '{0}' properties. Found '{1}' properties.</param>
        /// <param name="param1">Parameter 1 for string: A message cannot have more than '{0}' properties. Found '{1}' properties.</param>
        internal static string TooManyMessageProperties(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("TooManyMessageProperties", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The size of message property '{0}' exceeds the limit of '{1}' bytes.</summary>
        /// <param name="param0">Parameter 0 for string: The size of message property '{0}' exceeds the limit of '{1}' bytes.</param>
        /// <param name="param1">Parameter 1 for string: The size of message property '{0}' exceeds the limit of '{1}' bytes.</param>
        internal static string ExceededMessagePropertySizeLimit(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ExceededMessagePropertySizeLimit", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The endpoint address '{0}' must specify the name of the messaging entity. Expected 'sb://resourcelocator/entityname'.</summary>
        /// <param name="param0">Parameter 0 for string: The endpoint address '{0}' must specify the name of the messaging entity. Expected 'sb://resourcelocator/entityname'.</param>
        internal static string EntityNameNotFound(object param0) {
            return string.Format(Culture, ResourceManager.GetString("EntityNameNotFound", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Serialization operation failed due to unsupported type {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Serialization operation failed due to unsupported type {0}.</param>
        internal static string FailedToSerializeUnsupportedType(object param0) {
            return string.Format(Culture, ResourceManager.GetString("FailedToSerializeUnsupportedType", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Deserialize operation failed due to unsupported property {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Deserialize operation failed due to unsupported property {0}.</param>
        internal static string FailedToDeserializeUnsupportedProperty(object param0) {
            return string.Format(Culture, ResourceManager.GetString("FailedToDeserializeUnsupportedProperty", Culture), param0);
        }
        
        /// <summary>Gets localized string like: There was an overflow when adding the values {0} and {1} of the type {2}.</summary>
        /// <param name="param0">Parameter 0 for string: There was an overflow when adding the values {0} and {1} of the type {2}.</param>
        /// <param name="param1">Parameter 1 for string: There was an overflow when adding the values {0} and {1} of the type {2}.</param>
        /// <param name="param2">Parameter 2 for string: There was an overflow when adding the values {0} and {1} of the type {2}.</param>
        internal static string OverflowWhenAddingException(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("OverflowWhenAddingException", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The property {0} cannot be assigned to.</summary>
        /// <param name="param0">Parameter 0 for string: The property {0} cannot be assigned to.</param>
        internal static string MessageAttributeSetMethodNotAccessible(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessageAttributeSetMethodNotAccessible", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The property {0} cannot be assigned from.</summary>
        /// <param name="param0">Parameter 0 for string: The property {0} cannot be assigned from.</param>
        internal static string MessageAttributeGetMethodNotAccessible(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessageAttributeGetMethodNotAccessible", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The specified property {0} does not exist, or it is not a gettable property of the {1} class.</summary>
        /// <param name="param0">Parameter 0 for string: The specified property {0} does not exist, or it is not a gettable property of the {1} class.</param>
        /// <param name="param1">Parameter 1 for string: The specified property {0} does not exist, or it is not a gettable property of the {1} class.</param>
        internal static string MessageGetPropertyNotFound(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("MessageGetPropertyNotFound", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The length of the filter action statement is {0}, which exceeds the maximum length of {1}.</summary>
        /// <param name="param0">Parameter 0 for string: The length of the filter action statement is {0}, which exceeds the maximum length of {1}.</param>
        /// <param name="param1">Parameter 1 for string: The length of the filter action statement is {0}, which exceeds the maximum length of {1}.</param>
        internal static string SqlFilterActionStatmentTooLong(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("SqlFilterActionStatmentTooLong", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: There are {0} statements defined in the filter action, which exceeds the allowed maximum of {1}.</summary>
        /// <param name="param0">Parameter 0 for string: There are {0} statements defined in the filter action, which exceeds the allowed maximum of {1}.</param>
        /// <param name="param1">Parameter 1 for string: There are {0} statements defined in the filter action, which exceeds the allowed maximum of {1}.</param>
        internal static string FilterActionTooManyStatements(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("FilterActionTooManyStatements", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: sessionId:messageId '{0}':'{1}' This correlation response was previously received or not expected.</summary>
        /// <param name="param0">Parameter 0 for string: sessionId:messageId '{0}':'{1}' This correlation response was previously received or not expected.</param>
        /// <param name="param1">Parameter 1 for string: sessionId:messageId '{0}':'{1}' This correlation response was previously received or not expected.</param>
        internal static string NoCorrelationForChannelMessageId(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("NoCorrelationForChannelMessageId", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: sessionId:messageId '{0}':'{1}' There was no correlation response for the channel message.</summary>
        /// <param name="param0">Parameter 0 for string: sessionId:messageId '{0}':'{1}' There was no correlation response for the channel message.</param>
        /// <param name="param1">Parameter 1 for string: sessionId:messageId '{0}':'{1}' There was no correlation response for the channel message.</param>
        internal static string NoCorrelationResponseForChannelMessageId(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("NoCorrelationResponseForChannelMessageId", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: sessionId:messageId '{0}':'{1}' Sent a correlation message over the channel session.</summary>
        /// <param name="param0">Parameter 0 for string: sessionId:messageId '{0}':'{1}' Sent a correlation message over the channel session.</param>
        /// <param name="param1">Parameter 1 for string: sessionId:messageId '{0}':'{1}' Sent a correlation message over the channel session.</param>
        internal static string SentCorrelationMessage(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("SentCorrelationMessage", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: sessionId:relatesTo '{0}':'{1}' Received a correlation message over the channel session.</summary>
        /// <param name="param0">Parameter 0 for string: sessionId:relatesTo '{0}':'{1}' Received a correlation message over the channel session.</param>
        /// <param name="param1">Parameter 1 for string: sessionId:relatesTo '{0}':'{1}' Received a correlation message over the channel session.</param>
        internal static string ReceivedCorrelationMessage(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ReceivedCorrelationMessage", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The request has timed out after {0} milliseconds. The successful completion of the request cannot be determined. Additional queries should be made to determine whether or not the operation has succeeded.</summary>
        /// <param name="param0">Parameter 0 for string: The request has timed out after {0} milliseconds. The successful completion of the request cannot be determined. Additional queries should be made to determine whether or not the operation has succeeded.</param>
        internal static string OperationRequestTimedOut(object param0) {
            return string.Format(Culture, ResourceManager.GetString("OperationRequestTimedOut", Culture), param0);
        }
        
        /// <summary>Gets localized string like: An error occurred while creating the queue '{0}'. {1}</summary>
        /// <param name="param0">Parameter 0 for string: An error occurred while creating the queue '{0}'. {1}</param>
        /// <param name="param1">Parameter 1 for string: An error occurred while creating the queue '{0}'. {1}</param>
        internal static string QueueProvisioningError(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("QueueProvisioningError", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: An error occurred while deleting the queue '{0}'. {1}</summary>
        /// <param name="param0">Parameter 0 for string: An error occurred while deleting the queue '{0}'. {1}</param>
        /// <param name="param1">Parameter 1 for string: An error occurred while deleting the queue '{0}'. {1}</param>
        internal static string QueueUnProvisioningError(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("QueueUnProvisioningError", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: An error occurred while creating the subscription '{0}' for the topic {1}. {2}</summary>
        /// <param name="param0">Parameter 0 for string: An error occurred while creating the subscription '{0}' for the topic {1}. {2}</param>
        /// <param name="param1">Parameter 1 for string: An error occurred while creating the subscription '{0}' for the topic {1}. {2}</param>
        /// <param name="param2">Parameter 2 for string: An error occurred while creating the subscription '{0}' for the topic {1}. {2}</param>
        internal static string SubscriptionProvisioningError(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("SubscriptionProvisioningError", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: An error occurred while creating the topic '{0}'. {1}</summary>
        /// <param name="param0">Parameter 0 for string: An error occurred while creating the topic '{0}'. {1}</param>
        /// <param name="param1">Parameter 1 for string: An error occurred while creating the topic '{0}'. {1}</param>
        internal static string TopicProvisioningError(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("TopicProvisioningError", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: An error occurred while deleting the topic '{0}'. {1}</summary>
        /// <param name="param0">Parameter 0 for string: An error occurred while deleting the topic '{0}'. {1}</param>
        /// <param name="param1">Parameter 1 for string: An error occurred while deleting the topic '{0}'. {1}</param>
        internal static string TopicUnProvisioningError(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("TopicUnProvisioningError", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Incompatible queue export type. Expected type {0} or {1}. Specified type is {2}.</summary>
        /// <param name="param0">Parameter 0 for string: Incompatible queue export type. Expected type {0} or {1}. Specified type is {2}.</param>
        /// <param name="param1">Parameter 1 for string: Incompatible queue export type. Expected type {0} or {1}. Specified type is {2}.</param>
        /// <param name="param2">Parameter 2 for string: Incompatible queue export type. Expected type {0} or {1}. Specified type is {2}.</param>
        internal static string IncompatibleQueueExport(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("IncompatibleQueueExport", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Incompatible topic export type. Expected type {0} or {1}. Specified type is {2}.</summary>
        /// <param name="param0">Parameter 0 for string: Incompatible topic export type. Expected type {0} or {1}. Specified type is {2}.</param>
        /// <param name="param1">Parameter 1 for string: Incompatible topic export type. Expected type {0} or {1}. Specified type is {2}.</param>
        /// <param name="param2">Parameter 2 for string: Incompatible topic export type. Expected type {0} or {1}. Specified type is {2}.</param>
        internal static string IncompatibleTopicExport(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("IncompatibleTopicExport", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Provide a valid sub-queue name. The allowed values are: '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Provide a valid sub-queue name. The allowed values are: '{0}'.</param>
        internal static string InvalidSubQueueNameString(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidSubQueueNameString", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Cannot convert the filter action of type '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Cannot convert the filter action of type '{0}'.</param>
        internal static string CannotConvertFilterAction(object param0) {
            return string.Format(Culture, ResourceManager.GetString("CannotConvertFilterAction", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Cannot convert the filter expression of type '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Cannot convert the filter expression of type '{0}'.</param>
        internal static string CannotConvertFilterExpression(object param0) {
            return string.Format(Culture, ResourceManager.GetString("CannotConvertFilterExpression", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The Uri address given contains a path which is not allowed. Remove the path from the supplied Uri {0}.</summary>
        /// <param name="param0">Parameter 0 for string: The Uri address given contains a path which is not allowed. Remove the path from the supplied Uri {0}.</param>
        internal static string InvalidAddressPath(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidAddressPath", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The entity name or path cannot contain '/' as prefix or suffix. The supplied value is '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: The entity name or path cannot contain '/' as prefix or suffix. The supplied value is '{0}'.</param>
        internal static string InvalidEntityNameFormatWithSlash(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidEntityNameFormatWithSlash", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The entity name or path contains an invalid character '{0}'. The supplied value is '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: The entity name or path contains an invalid character '{0}'. The supplied value is '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: The entity name or path contains an invalid character '{0}'. The supplied value is '{1}'.</param>
        internal static string InvalidCharacterInEntityName(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("InvalidCharacterInEntityName", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The value supplied must be between {0} and {1}.</summary>
        /// <param name="param0">Parameter 0 for string: The value supplied must be between {0} and {1}.</param>
        /// <param name="param1">Parameter 1 for string: The value supplied must be between {0} and {1}.</param>
        internal static string ArgumentOutOfRange(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ArgumentOutOfRange", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The length of the filter statement is {0}, which exceeds the maximum length of {1}</summary>
        /// <param name="param0">Parameter 0 for string: The length of the filter statement is {0}, which exceeds the maximum length of {1}</param>
        /// <param name="param1">Parameter 1 for string: The length of the filter statement is {0}, which exceeds the maximum length of {1}</param>
        internal static string SqlFilterStatmentTooLong(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("SqlFilterStatmentTooLong", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The message ID is either null, empty, or exceeds the maximum allowed size of {0} characters.</summary>
        /// <param name="param0">Parameter 0 for string: The message ID is either null, empty, or exceeds the maximum allowed size of {0} characters.</param>
        internal static string MessageIdIsNullOrEmptyOrOverMaxValue(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessageIdIsNullOrEmptyOrOverMaxValue", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The session ID exceeds the maximum allowed size of {0} characters.</summary>
        /// <param name="param0">Parameter 0 for string: The session ID exceeds the maximum allowed size of {0} characters.</param>
        internal static string SessionIdIsOverMaxValue(object param0) {
            return string.Format(Culture, ResourceManager.GetString("SessionIdIsOverMaxValue", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Cannot get entity '{0}' because it is not of type {1}.</summary>
        /// <param name="param0">Parameter 0 for string: Cannot get entity '{0}' because it is not of type {1}.</param>
        /// <param name="param1">Parameter 1 for string: Cannot get entity '{0}' because it is not of type {1}.</param>
        internal static string InvalidManagementEntityType(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("InvalidManagementEntityType", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: {0}.{1}</summary>
        /// <param name="param0">Parameter 0 for string: {0}.{1}</param>
        /// <param name="param1">Parameter 1 for string: {0}.{1}</param>
        internal static string TrackableExceptionMessageFormat(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("TrackableExceptionMessageFormat", Culture), param0, param1);
        }

        /// <summary>Gets localized string like: {0}.{1}</summary>
        /// <param name="param0">Parameter 0 for string: {0}.{1}.{2}</param>
        /// <param name="param1">Parameter 1 for string: {0}.{1}.{2}</param>
        /// <param name="param2">Parameter 2 for string: {0}.{1}.{2}</param>
        /// <param name="param3">Parameter 3 for string: {0}.{1}.{2}</param>
        internal static string TrackableHttpExceptionMessageFormat(object param0, object param1, object param2, object param3)
        {
            return string.Format(Culture, ResourceManager.GetString("TrackableHttpExceptionMessageFormat", Culture), param0, param1, param2, param3);
        }

        /// <summary>Gets localized string like: TrackingId:{0}, Timestamp:{1}</summary>
        /// <param name="param0">Parameter 0 for string: TrackingId:{0}, Timestamp:{1}</param>
        /// <param name="param1">Parameter 1 for string: TrackingId:{0}, Timestamp:{1}</param>
        internal static string TrackingIdAndTimestampFormat(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("TrackingIdAndTimestampFormat", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: A system property cannot be removed. The system property specified was '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: A system property cannot be removed. The system property specified was '{0}'.</param>
        internal static string SqlFilterActionCannotRemoveSystemProperty(object param0) {
            return string.Format(Culture, ResourceManager.GetString("SqlFilterActionCannotRemoveSystemProperty", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The specified scope ({0}) is not supported.</summary>
        /// <param name="param0">Parameter 0 for string: The specified scope ({0}) is not supported.</param>
        internal static string FilterScopeNotSupported(object param0) {
            return string.Format(Culture, ResourceManager.GetString("FilterScopeNotSupported", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The specified compatibility level ({0}) is not supported.</summary>
        /// <param name="param0">Parameter 0 for string: The specified compatibility level ({0}) is not supported.</param>
        internal static string NotSupportedCompatibilityLevel(object param0) {
            return string.Format(Culture, ResourceManager.GetString("NotSupportedCompatibilityLevel", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The specified property ({0}) does not exist or it is not a settable property of the {1} class.</summary>
        /// <param name="param0">Parameter 0 for string: The specified property ({0}) does not exist or it is not a settable property of the {1} class.</param>
        /// <param name="param1">Parameter 1 for string: The specified property ({0}) does not exist or it is not a settable property of the {1} class.</param>
        internal static string MessageSetPropertyNotFound(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("MessageSetPropertyNotFound", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: '{0}' is a reserved keyword. Use a delimited identifier if you intended to use a reserved keyword as a property name.</summary>
        /// <param name="param0">Parameter 0 for string: '{0}' is a reserved keyword. Use a delimited identifier if you intended to use a reserved keyword as a property name.</param>
        internal static string SqlFilterReservedKeyword(object param0) {
            return string.Format(Culture, ResourceManager.GetString("SqlFilterReservedKeyword", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The delimited identifier ({0}) was not terminated properly.</summary>
        /// <param name="param0">Parameter 0 for string: The delimited identifier ({0}) was not terminated properly.</param>
        internal static string DelimitedIdentifierNotTerminated(object param0) {
            return string.Format(Culture, ResourceManager.GetString("DelimitedIdentifierNotTerminated", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The string ({0}) was not terminated properly.</summary>
        /// <param name="param0">Parameter 0 for string: The string ({0}) was not terminated properly.</param>
        internal static string StringLiteralNotTerminated(object param0) {
            return string.Format(Culture, ResourceManager.GetString("StringLiteralNotTerminated", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The '{0}' function expects {1} argument(s), but {2} argument(s) was/were specified.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' function expects {1} argument(s), but {2} argument(s) was/were specified.</param>
        /// <param name="param1">Parameter 1 for string: The '{0}' function expects {1} argument(s), but {2} argument(s) was/were specified.</param>
        /// <param name="param2">Parameter 2 for string: The '{0}' function expects {1} argument(s), but {2} argument(s) was/were specified.</param>
        internal static string FilterFunctionIncorrectNumberOfArguments(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("FilterFunctionIncorrectNumberOfArguments", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The specified function name ({0}) is unknown. Make sure the function name is correct.</summary>
        /// <param name="param0">Parameter 0 for string: The specified function name ({0}) is unknown. Make sure the function name is correct.</param>
        internal static string FilterUnknownFunctionName(object param0) {
            return string.Format(Culture, ResourceManager.GetString("FilterUnknownFunctionName", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The string ('{0}...') length is {1} and it is longer than allowed. Maximum string length allowed is {2}.</summary>
        /// <param name="param0">Parameter 0 for string: The string ('{0}...') length is {1} and it is longer than allowed. Maximum string length allowed is {2}.</param>
        /// <param name="param1">Parameter 1 for string: The string ('{0}...') length is {1} and it is longer than allowed. Maximum string length allowed is {2}.</param>
        /// <param name="param2">Parameter 2 for string: The string ('{0}...') length is {1} and it is longer than allowed. Maximum string length allowed is {2}.</param>
        internal static string StringIsTooLong(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("StringIsTooLong", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: {0} '{1}' contains character(s) that are not allowed by Service Bus. Entity names or path can contain only letters, numbers, periods (.), hyphens (-), and underscores (_).</summary>
        /// <param name="param0">Parameter 0 for string: {0} '{1}' contains character(s) that are not allowed by Service Bus. Entity names or path can contain only letters, numbers, periods (.), hyphens (-), and underscores (_).</param>
        /// <param name="param1">Parameter 1 for string: {0} '{1}' contains character(s) that are not allowed by Service Bus. Entity names or path can contain only letters, numbers, periods (.), hyphens (-), and underscores (_).</param>
        internal static string InvalidCharactersInEntityName(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("InvalidCharactersInEntityName", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The property '{0}' is null or empty.</summary>
        /// <param name="param0">Parameter 0 for string: The property '{0}' is null or empty.</param>
        internal static string PropertyIsNullOrEmpty(object param0) {
            return string.Format(Culture, ResourceManager.GetString("PropertyIsNullOrEmpty", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Messaging entity '{0}' is currently disabled.</summary>
        /// <param name="param0">Parameter 0 for string: Messaging entity '{0}' is currently disabled.</param>
        internal static string MessagingEntityIsDisabledException(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessagingEntityIsDisabledException", Culture), param0);
        }
        
        /// <summary>Gets localized string like: A PropertyReference instance ({0}) is used without being part of RuleCreationAction.Initializes property.</summary>
        /// <param name="param0">Parameter 0 for string: A PropertyReference instance ({0}) is used without being part of RuleCreationAction.Initializes property.</param>
        internal static string PropertyReferenceUsedWithoutInitializes(object param0) {
            return string.Format(Culture, ResourceManager.GetString("PropertyReferenceUsedWithoutInitializes", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Certificate '{0}' is in the untrusted store.</summary>
        /// <param name="param0">Parameter 0 for string: Certificate '{0}' is in the untrusted store.</param>
        internal static string X509InUnTrustedStore(object param0) {
            return string.Format(Culture, ResourceManager.GetString("X509InUnTrustedStore", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Certificate '{0}' is not used in its valid time period.</summary>
        /// <param name="param0">Parameter 0 for string: Certificate '{0}' is not used in its valid time period.</param>
        internal static string X509InvalidUsageTime(object param0) {
            return string.Format(Culture, ResourceManager.GetString("X509InvalidUsageTime", Culture), param0);
        }
        
        /// <summary>Gets localized string like: CRL check failed for certificate '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: CRL check failed for certificate '{0}'.</param>
        internal static string X509CRLCheckFailed(object param0) {
            return string.Format(Culture, ResourceManager.GetString("X509CRLCheckFailed", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Cannot find transaction result for the transaction id '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Cannot find transaction result for the transaction id '{0}'.</param>
        internal static string CannotFindTransactionResult(object param0) {
            return string.Format(Culture, ResourceManager.GetString("CannotFindTransactionResult", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Unexpected type encountered. Expected '{0}' or '{1}', but received '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: Unexpected type encountered. Expected '{0}' or '{1}', but received '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: Unexpected type encountered. Expected '{0}' or '{1}', but received '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: Unexpected type encountered. Expected '{0}' or '{1}', but received '{2}'.</param>
        internal static string ExpectedTypeInvalidCastException(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("ExpectedTypeInvalidCastException", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Invalid element: {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Invalid element: {0}.</param>
        internal static string InvalidElement(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidElement", Culture), param0);
        }
        
        /// <summary>Gets localized string like: {0} is not a supported channel-type</summary>
        /// <param name="param0">Parameter 0 for string: {0} is not a supported channel-type</param>
        internal static string UnsupportedChannelType(object param0) {
            return string.Format(Culture, ResourceManager.GetString("UnsupportedChannelType", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Unsupported ConnectivityMode '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Unsupported ConnectivityMode '{0}'.</param>
        internal static string UnsupportedConnectivityMode(object param0) {
            return string.Format(Culture, ResourceManager.GetString("UnsupportedConnectivityMode", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Unable to retrieve the '{0}' header from the message.</summary>
        /// <param name="param0">Parameter 0 for string: Unable to retrieve the '{0}' header from the message.</param>
        internal static string MessageHeaderRetrieval(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessageHeaderRetrieval", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Unable to retrieve the '{0}' header from the response.</summary>
        /// <param name="param0">Parameter 0 for string: Unable to retrieve the '{0}' header from the response.</param>
        internal static string ResponseHeaderRetrieval(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ResponseHeaderRetrieval", Culture), param0);
        }
        
        /// <summary>Gets localized string like: {0}: unable to read Atom XML content.</summary>
        /// <param name="param0">Parameter 0 for string: {0}: unable to read Atom XML content.</param>
        internal static string XMLContentReadFault(object param0) {
            return string.Format(Culture, ResourceManager.GetString("XMLContentReadFault", Culture), param0);
        }
        
        /// <summary>Gets localized string like: {0}: ContentType is incorrect</summary>
        /// <param name="param0">Parameter 0 for string: {0}: ContentType is incorrect</param>
        internal static string IncorrectContentTypeFault(object param0) {
            return string.Format(Culture, ResourceManager.GetString("IncorrectContentTypeFault", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Unable to reach {0} via TCP ({1}, {2}) or HTTP (80, 443).</summary>
        /// <param name="param0">Parameter 0 for string: Unable to reach {0} via TCP ({1}, {2}) or HTTP (80, 443).</param>
        /// <param name="param1">Parameter 1 for string: Unable to reach {0} via TCP ({1}, {2}) or HTTP (80, 443).</param>
        /// <param name="param2">Parameter 2 for string: Unable to reach {0} via TCP ({1}, {2}) or HTTP (80, 443).</param>
        internal static string UnableToReach(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("UnableToReach", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Exceeded the maximum allowed redirects: {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Exceeded the maximum allowed redirects: {0}.</param>
        internal static string MaxRedirectsExceeded(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MaxRedirectsExceeded", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Found {0} DNS claims in authorization context.</summary>
        /// <param name="param0">Parameter 0 for string: Found {0} DNS claims in authorization context.</param>
        internal static string InvalidDNSClaims(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidDNSClaims", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Scheme of base address must be '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Scheme of base address must be '{0}'.</param>
        internal static string BaseAddressScheme(object param0) {
            return string.Format(Culture, ResourceManager.GetString("BaseAddressScheme", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Unsupported action '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Unsupported action '{0}'.</param>
        internal static string UnsupportedAction(object param0) {
            return string.Format(Culture, ResourceManager.GetString("UnsupportedAction", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The Uri provided {0} does not match Service Bus domain: {1}.</summary>
        /// <param name="param0">Parameter 0 for string: The Uri provided {0} does not match Service Bus domain: {1}.</param>
        /// <param name="param1">Parameter 1 for string: The Uri provided {0} does not match Service Bus domain: {1}.</param>
        internal static string MismatchServiceBusDomain(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("MismatchServiceBusDomain", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Uri {0} cannot support more than 1 prefix for Service Bus domain: {1}.</summary>
        /// <param name="param0">Parameter 0 for string: Uri {0} cannot support more than 1 prefix for Service Bus domain: {1}.</param>
        /// <param name="param1">Parameter 1 for string: Uri {0} cannot support more than 1 prefix for Service Bus domain: {1}.</param>
        internal static string UnsupportedServiceBusDomainPrefix(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("UnsupportedServiceBusDomainPrefix", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Unexpected SSL signal value '{0}' found in preamble message.</summary>
        /// <param name="param0">Parameter 0 for string: Unexpected SSL signal value '{0}' found in preamble message.</param>
        internal static string UnexpectedSSL(object param0) {
            return string.Format(Culture, ResourceManager.GetString("UnexpectedSSL", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Invalid frame size:{0}, maximum frame size:{1}.</summary>
        /// <param name="param0">Parameter 0 for string: Invalid frame size:{0}, maximum frame size:{1}.</param>
        /// <param name="param1">Parameter 1 for string: Invalid frame size:{0}, maximum frame size:{1}.</param>
        internal static string InvalidFrameSize(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("InvalidFrameSize", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The feature '{0}' is not supported with the current configuration.</summary>
        /// <param name="param0">Parameter 0 for string: The feature '{0}' is not supported with the current configuration.</param>
        internal static string FeatureNotSupported(object param0) {
            return string.Format(Culture, ResourceManager.GetString("FeatureNotSupported", Culture), param0);
        }
        
        /// <summary>Gets localized string like: {0} is not currently supported in BrokeredMessage application properties.</summary>
        /// <param name="param0">Parameter 0 for string: {0} is not currently supported in BrokeredMessage application properties.</param>
        internal static string BrokeredMessageApplicationProperties(object param0) {
            return string.Format(Culture, ResourceManager.GetString("BrokeredMessageApplicationProperties", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Rights cannot be null, empty or greater than {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Rights cannot be null, empty or greater than {0}.</param>
        internal static string NullEmptyRights(object param0) {
            return string.Format(Culture, ResourceManager.GetString("NullEmptyRights", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Unsupported Right '{0}'. The Supported Rights are '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: Unsupported Right '{0}'. The Supported Rights are '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: Unsupported Right '{0}'. The Supported Rights are '{1}'.</param>
        internal static string UnsupportedRight(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("UnsupportedRight", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: GetClaim does not support linkInfo.LinkType '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: GetClaim does not support linkInfo.LinkType '{0}'.</param>
        internal static string UnsupportedGetClaim(object param0) {
            return string.Format(Culture, ResourceManager.GetString("UnsupportedGetClaim", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Invalid scheme value, must be http, or https, or {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Invalid scheme value, must be http, or https, or {0}.</param>
        internal static string InvalidSchemeValue(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidSchemeValue", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Invalid service namespace: \"{0}\".</summary>
        /// <param name="param0">Parameter 0 for string: Invalid service namespace: \"{0}\".</param>
        internal static string InvalidServiceNameSpace(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidServiceNameSpace", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Current environment is onebox but input Uri has an invalid path {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Current environment is onebox but input Uri has an invalid path {0}.</param>
        internal static string InputURIPath(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InputURIPath", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The Uri \"{0}\" has an unexpected hostname.</summary>
        /// <param name="param0">Parameter 0 for string: The Uri \"{0}\" has an unexpected hostname.</param>
        internal static string UnexpedtedURIHostName(object param0) {
            return string.Format(Culture, ResourceManager.GetString("UnexpedtedURIHostName", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The Uri \"{0}\" has an invalid service namespace.</summary>
        /// <param name="param0">Parameter 0 for string: The Uri \"{0}\" has an invalid service namespace.</param>
        internal static string URIServiceNameSpace(object param0) {
            return string.Format(Culture, ResourceManager.GetString("URIServiceNameSpace", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Channel Open did not complete within the specified timeout of {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Channel Open did not complete within the specified timeout of {0}.</param>
        internal static string OpenChannelFailed(object param0) {
            return string.Format(Culture, ResourceManager.GetString("OpenChannelFailed", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The specified parameter ({0}) in Parameters property was not used in the expression specified in SqlExpression.</summary>
        /// <param name="param0">Parameter 0 for string: The specified parameter ({0}) in Parameters property was not used in the expression specified in SqlExpression.</param>
        internal static string ExtraParameterSpecifiedForSqlExpression(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ExtraParameterSpecifiedForSqlExpression", Culture), param0);
        }
        
        /// <summary>Gets localized string like: A parameter ({0}) used in the expression specified in SqlExpression is missing from the Parameters property.</summary>
        /// <param name="param0">Parameter 0 for string: A parameter ({0}) used in the expression specified in SqlExpression is missing from the Parameters property.</param>
        internal static string ParameterNotSpecifiedForSqlExpression(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ParameterNotSpecifiedForSqlExpression", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Uri Bad format: {0}</summary>
        /// <param name="param0">Parameter 0 for string: Uri Bad format: {0}</param>
        internal static string BadUriFormat(object param0) {
            return string.Format(Culture, ResourceManager.GetString("BadUriFormat", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Unsupported type {0} for array.</summary>
        /// <param name="param0">Parameter 0 for string: Unsupported type {0} for array.</param>
        internal static string NotSupportFrameCode(object param0) {
            return string.Format(Culture, ResourceManager.GetString("NotSupportFrameCode", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Another update request is in progress for the entity {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Another update request is in progress for the entity {0}.</param>
        internal static string MessagingEntityUpdateConflict(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessagingEntityUpdateConflict", Culture), param0);
        }
        
        /// <summary>Gets localized string like: '{0}' is not a supported type.</summary>
        /// <param name="param0">Parameter 0 for string: '{0}' is not a supported type.</param>
        internal static string NotSupportedPropertyType(object param0) {
            return string.Format(Culture, ResourceManager.GetString("NotSupportedPropertyType", Culture), param0);
        }
        
        /// <summary>Gets localized string like: A duplicate property '{0}' was found in the Service Bus connection string.</summary>
        /// <param name="param0">Parameter 0 for string: A duplicate property '{0}' was found in the Service Bus connection string.</param>
        internal static string AppSettingsConfigDuplicateSetting(object param0) {
            return string.Format(Culture, ResourceManager.GetString("AppSettingsConfigDuplicateSetting", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Configuration is missing required information. Make sure the property '{0}' is defined as part of '{1}' key within 'appSettings' section, or Windows Azure configuration settings.</summary>
        /// <param name="param0">Parameter 0 for string: Configuration is missing required information. Make sure the property '{0}' is defined as part of '{1}' key within 'appSettings' section, or Windows Azure configuration settings.</param>
        /// <param name="param1">Parameter 1 for string: Configuration is missing required information. Make sure the property '{0}' is defined as part of '{1}' key within 'appSettings' section, or Windows Azure configuration settings.</param>
        internal static string AppSettingsConfigMissingSetting(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("AppSettingsConfigMissingSetting", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The Service Bus connection string contains invalid property. '{0}' is not a valid property within the connection string.</summary>
        /// <param name="param0">Parameter 0 for string: The Service Bus connection string contains invalid property. '{0}' is not a valid property within the connection string.</param>
        internal static string AppSettingsConfigSettingInvalidKey(object param0) {
            return string.Format(Culture, ResourceManager.GetString("AppSettingsConfigSettingInvalidKey", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The Service Bus connection string contains invalid value. The property '{0}' has invalid value '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: The Service Bus connection string contains invalid value. The property '{0}' has invalid value '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: The Service Bus connection string contains invalid value. The property '{0}' has invalid value '{1}'.</param>
        internal static string AppSettingsConfigSettingInvalidValue(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("AppSettingsConfigSettingInvalidValue", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Unable to create MessagingFactory using connection string. {0} See inner exception for details. Check your connection string and then try again. For more information please see http://go.microsoft.com/fwlink/?LinkID=249089</summary>
        /// <param name="param0">Parameter 0 for string: Unable to create MessagingFactory using connection string. {0} See inner exception for details. Check your connection string and then try again. For more information please see http://go.microsoft.com/fwlink/?LinkID=249089</param>
        internal static string AppSettingsCreateFactoryWithInvalidConnectionString(object param0) {
            return string.Format(Culture, ResourceManager.GetString("AppSettingsCreateFactoryWithInvalidConnectionString", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Unable to create NamespaceManager using connection string. {0} See inner exception for details. Check your connection string and then try again. For more information please see http://go.microsoft.com/fwlink/?LinkID=249089</summary>
        /// <param name="param0">Parameter 0 for string: Unable to create NamespaceManager using connection string. {0} See inner exception for details. Check your connection string and then try again. For more information please see http://go.microsoft.com/fwlink/?LinkID=249089</param>
        internal static string AppSettingsCreateManagerWithInvalidConnectionString(object param0) {
            return string.Format(Culture, ResourceManager.GetString("AppSettingsCreateManagerWithInvalidConnectionString", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Some of the configuration is missing a required component. Make sure all or none of the following properties are defined as part of '{0}' key within 'appSettings' section, or Windows Azure configuration settings: [{1}]</summary>
        /// <param name="param0">Parameter 0 for string: Some of the configuration is missing a required component. Make sure all or none of the following properties are defined as part of '{0}' key within 'appSettings' section, or Windows Azure configuration settings: [{1}]</param>
        /// <param name="param1">Parameter 1 for string: Some of the configuration is missing a required component. Make sure all or none of the following properties are defined as part of '{0}' key within 'appSettings' section, or Windows Azure configuration settings: [{1}]</param>
        internal static string AppSettingsConfigIncompleteSettingCombination(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("AppSettingsConfigIncompleteSettingCombination", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The messaging entity '{0}' has been moved to a different container</summary>
        /// <param name="param0">Parameter 0 for string: The messaging entity '{0}' has been moved to a different container</param>
        internal static string MessagingEntityMoved(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessagingEntityMoved", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Please make sure either all or none of the following arguments are defined: '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Please make sure either all or none of the following arguments are defined: '{0}'.</param>
        internal static string ArgumentInvalidCombination(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ArgumentInvalidCombination", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The stream of type '{0}' within the BrokeredMessage is not cloneable.</summary>
        /// <param name="param0">Parameter 0 for string: The stream of type '{0}' within the BrokeredMessage is not cloneable.</param>
        internal static string BrokeredMessageStreamNotCloneable(object param0) {
            return string.Format(Culture, ResourceManager.GetString("BrokeredMessageStreamNotCloneable", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The Value of Property '{0}' cannot be less than Value of Property '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: The Value of Property '{0}' cannot be less than Value of Property '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: The Value of Property '{0}' cannot be less than Value of Property '{1}'.</param>
        internal static string PropertyInvalidCombination(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("PropertyInvalidCombination", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Messaging entity '{0}' is currently disabled for Receive operations.</summary>
        /// <param name="param0">Parameter 0 for string: Messaging entity '{0}' is currently disabled for Receive operations.</param>
        internal static string MessagingEntityIsDisabledForReceiveException(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessagingEntityIsDisabledForReceiveException", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Messaging entity '{0}' is currently disabled for Send operations.</summary>
        /// <param name="param0">Parameter 0 for string: Messaging entity '{0}' is currently disabled for Send operations.</param>
        internal static string MessagingEntityIsDisabledForSendException(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessagingEntityIsDisabledForSendException", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Could not find '{0}' setting in gateway</summary>
        /// <param name="param0">Parameter 0 for string: Could not find '{0}' setting in gateway</param>
        internal static string SqlSettingNotFound(object param0) {
            return string.Format(Culture, ResourceManager.GetString("SqlSettingNotFound", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The specified value ({0}) is invalid. "maxConcurrentCalls" must be greater than zero.</summary>
        /// <param name="param0">Parameter 0 for string: The specified value ({0}) is invalid. "maxConcurrentCalls" must be greater than zero.</param>
        internal static string MaxConcurrentCallsMustBeGreaterThanZero(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MaxConcurrentCallsMustBeGreaterThanZero", Culture), param0);
        }
        
        /// <summary>Gets localized string like: This '{0}' instance has already been started once. To start another instance, please create a new '{0}' object and start that.</summary>
        /// <param name="param0">Parameter 0 for string: This '{0}' instance has already been started once. To start another instance, please create a new '{0}' object and start that.</param>
        internal static string HttpServerAlreadyRunning(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HttpServerAlreadyRunning", Culture), param0);
        }
        
        /// <summary>Gets localized string like: An exception was received when sending the message to queue '{0}'. Exception: {1}: {2}</summary>
        /// <param name="param0">Parameter 0 for string: An exception was received when sending the message to queue '{0}'. Exception: {1}: {2}</param>
        /// <param name="param1">Parameter 1 for string: An exception was received when sending the message to queue '{0}'. Exception: {1}: {2}</param>
        /// <param name="param2">Parameter 2 for string: An exception was received when sending the message to queue '{0}'. Exception: {1}: {2}</param>
        internal static string BacklogDeadletterDescriptionNotRetryable(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("BacklogDeadletterDescriptionNotRetryable", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Could not use property '{0}' in message id '{1}'. Expected type '{2}' but received type '{3}' with string value '{4}'.</summary>
        /// <param name="param0">Parameter 0 for string: Could not use property '{0}' in message id '{1}'. Expected type '{2}' but received type '{3}' with string value '{4}'.</param>
        /// <param name="param1">Parameter 1 for string: Could not use property '{0}' in message id '{1}'. Expected type '{2}' but received type '{3}' with string value '{4}'.</param>
        /// <param name="param2">Parameter 2 for string: Could not use property '{0}' in message id '{1}'. Expected type '{2}' but received type '{3}' with string value '{4}'.</param>
        /// <param name="param3">Parameter 3 for string: Could not use property '{0}' in message id '{1}'. Expected type '{2}' but received type '{3}' with string value '{4}'.</param>
        /// <param name="param4">Parameter 4 for string: Could not use property '{0}' in message id '{1}'. Expected type '{2}' but received type '{3}' with string value '{4}'.</param>
        internal static string PairedNamespacePropertyExtractionDlqDescription(object param0, object param1, object param2, object param3, object param4) {
            return string.Format(Culture, ResourceManager.GetString("PairedNamespacePropertyExtractionDlqDescription", Culture), param0, param1, param2, param3, param4);
        }
        
        /// <summary>Gets localized string like: Unable to use the certificate specified in apple credentials. The error is: '{0}'</summary>
        /// <param name="param0">Parameter 0 for string: Unable to use the certificate specified in apple credentials. The error is: '{0}'</param>
        internal static string ApnsCertificateNotUsable(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ApnsCertificateNotUsable", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Invalid token '{0}' in expression :'{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: Invalid token '{0}' in expression :'{1}'.</param>
        /// <param name="param1">Parameter 1 for string: Invalid token '{0}' in expression :'{1}'.</param>
        internal static string InvalidToken(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("InvalidToken", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Expression is '{0}'. Literal is missing closing notation. Current invalid token is '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: Expression is '{0}'. Literal is missing closing notation. Current invalid token is '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: Expression is '{0}'. Literal is missing closing notation. Current invalid token is '{1}'.</param>
        internal static string LitteralMissing(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("LitteralMissing", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Must contain WNS Header : '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Must contain WNS Header : '{0}'.</param>
        internal static string MissingWNSHeader(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MissingWNSHeader", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Property name is of length: ' {0}'. Maximum allowed length is '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: Property name is of length: ' {0}'. Maximum allowed length is '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: Property name is of length: ' {0}'. Maximum allowed length is '{1}'.</param>
        internal static string PropertyLengthError(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("PropertyLengthError", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Property Name: '{0}', Only ASCII-7 alphanumeric characters and '_' are permitted in the property name.</summary>
        /// <param name="param0">Parameter 0 for string: Property Name: '{0}', Only ASCII-7 alphanumeric characters and '_' are permitted in the property name.</param>
        internal static string PropertyNameError(object param0) {
            return string.Format(Culture, ResourceManager.GetString("PropertyNameError", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Token has to begin with one of these characters . % ' "" $.  Invalid token is '{0}', Expression '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: Token has to begin with one of these characters . % ' "" $.  Invalid token is '{0}', Expression '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: Token has to begin with one of these characters . % ' "" $.  Invalid token is '{0}', Expression '{1}'.</param>
        internal static string TokenBeginError(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("TokenBeginError", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Unsupported channel uri: '{0}'</summary>
        /// <param name="param0">Parameter 0 for string: Unsupported channel uri: '{0}'</param>
        internal static string UnsupportedChannelUri(object param0) {
            return string.Format(Culture, ResourceManager.GetString("UnsupportedChannelUri", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Unsupported expression :'{0}'</summary>
        /// <param name="param0">Parameter 0 for string: Unsupported expression :'{0}'</param>
        internal static string UnsupportedExpression(object param0) {
            return string.Format(Culture, ResourceManager.GetString("UnsupportedExpression", Culture), param0);
        }
        
        /// <summary>Gets localized string like: WNS header '{0}' is null or empty.</summary>
        /// <param name="param0">Parameter 0 for string: WNS header '{0}' is null or empty.</param>
        internal static string WNSHeaderNullOrEmpty(object param0) {
            return string.Format(Culture, ResourceManager.GetString("WNSHeaderNullOrEmpty", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Pairing error: MessageFactory at '{0}' is open and MessagingFactory at '{1}' is not open. Faulting MessagingFactory at '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Pairing error: MessageFactory at '{0}' is open and MessagingFactory at '{1}' is not open. Faulting MessagingFactory at '{0}'.</param>
        /// <param name="param1">Parameter 1 for string: Pairing error: MessageFactory at '{0}' is open and MessagingFactory at '{1}' is not open. Faulting MessagingFactory at '{0}'.</param>
        internal static string FaultingPairedMessagingFactory(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("FaultingPairedMessagingFactory", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Must contain Mpns Header : '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Must contain Mpns Header : '{0}'.</param>
        internal static string MissingMpnsHeader(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MissingMpnsHeader", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Unable to use the certificate specified in mpns credentials. The error is  : '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Unable to use the certificate specified in mpns credentials. The error is  : '{0}'.</param>
        internal static string MpnsCertificateError(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MpnsCertificateError", Culture), param0);
        }
        
        /// <summary>Gets localized string like: MPNS header '{0}' is null or empty.</summary>
        /// <param name="param0">Parameter 0 for string: MPNS header '{0}' is null or empty.</param>
        internal static string MpnsHeaderIsNullOrEmpty(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MpnsHeaderIsNullOrEmpty", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The api-version '{0}' in the query string is not supported. Either remove it from the Uri or use one of '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: The api-version '{0}' in the query string is not supported. Either remove it from the Uri or use one of '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: The api-version '{0}' in the query string is not supported. Either remove it from the Uri or use one of '{1}'.</param>
        internal static string UnknownApiVersion(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("UnknownApiVersion", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The '{0}' property exceeds the maximum allowed size of {1} characters.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' property exceeds the maximum allowed size of {1} characters.</param>
        /// <param name="param1">Parameter 1 for string: The '{0}' property exceeds the maximum allowed size of {1} characters.</param>
        internal static string PropertyOverMaxValue(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("PropertyOverMaxValue", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The specified type ({0}) does not have a public default constructor.</summary>
        /// <param name="param0">Parameter 0 for string: The specified type ({0}) does not have a public default constructor.</param>
        internal static string SessionHandlerDoesNotHaveDefaultConstructor(object param0) {
            return string.Format(Culture, ResourceManager.GetString("SessionHandlerDoesNotHaveDefaultConstructor", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The specified type ({0}) does not implement {1} or {2}.</summary>
        /// <param name="param0">Parameter 0 for string: The specified type ({0}) does not implement {1} or {2}.</param>
        /// <param name="param1">Parameter 1 for string: The specified type ({0}) does not implement {1} or {2}.</param>
        /// <param name="param2">Parameter 2 for string: The specified type ({0}) does not implement {1} or {2}.</param>
        internal static string SessionHandlerMissingInterfaces(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("SessionHandlerMissingInterfaces", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: {0} property must be equal or less than {1} property.</summary>
        /// <param name="param0">Parameter 0 for string: {0} property must be equal or less than {1} property.</param>
        /// <param name="param1">Parameter 1 for string: {0} property must be equal or less than {1} property.</param>
        internal static string PropertyMustBeEqualOrLessThanOtherProperty(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("PropertyMustBeEqualOrLessThanOtherProperty", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The specified value ({0}) is not valid. The value must be positive. </summary>
        /// <param name="param0">Parameter 0 for string: The specified value ({0}) is not valid. The value must be positive. </param>
        internal static string ValueMustBePositive(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ValueMustBePositive", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The messaging entity '{0}' is not valid anymore.</summary>
        /// <param name="param0">Parameter 0 for string: The messaging entity '{0}' is not valid anymore.</param>
        internal static string MessagingEntityGone(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessagingEntityGone", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Only {0} properties are required: {1}.</summary>
        /// <param name="param0">Parameter 0 for string: Only {0} properties are required: {1}.</param>
        /// <param name="param1">Parameter 1 for string: Only {0} properties are required: {1}.</param>
        internal static string OnlyNPropertiesRequired(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("OnlyNPropertiesRequired", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Required properties are not specified: {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Required properties are not specified: {0}.</param>
        internal static string RequiredPropertiesNotSpecified(object param0) {
            return string.Format(Culture, ResourceManager.GetString("RequiredPropertiesNotSpecified", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Required property is not specified: {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Required property is not specified: {0}.</param>
        internal static string RequiredPropertyNotSpecified(object param0) {
            return string.Format(Culture, ResourceManager.GetString("RequiredPropertyNotSpecified", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The operation '{0}' cannot be completed because the message was received through Peek. Make sure the message is obtained from a Receive() call instead.</summary>
        /// <param name="param0">Parameter 0 for string: The operation '{0}' cannot be completed because the message was received through Peek. Make sure the message is obtained from a Receive() call instead.</param>
        internal static string InvalidMethodWhilePeeking(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidMethodWhilePeeking", Culture), param0);
        }
        
        /// <summary>Gets localized string like: {0} must be equal to {1} when {1} has a value different than null. Assign null to {1} to be able to set {0}.</summary>
        /// <param name="param0">Parameter 0 for string: {0} must be equal to {1} when {1} has a value different than null. Assign null to {1} to be able to set {0}.</param>
        /// <param name="param1">Parameter 1 for string: {0} must be equal to {1} when {1} has a value different than null. Assign null to {1} to be able to set {0}.</param>
        internal static string DominatingPropertyMustBeEqualsToNonNullDormantProperty(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("DominatingPropertyMustBeEqualsToNonNullDormantProperty", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: EventHubReceiver can only have either client side starting offset or datetime, or create use a consumer group with checkpoint enabled (EnableCheckpoint={0})</summary>
        /// <param name="param0">Parameter 0 for string: EventHubReceiver can only have either client side starting offset or datetime, or create use a consumer group with checkpoint enabled (EnableCheckpoint={0})</param>
        internal static string InvalidEventHubCheckpointSettings(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidEventHubCheckpointSettings", Culture), param0);
        }
        
        /// <summary>Gets localized string like: '{0}' is not a supported operation for EventHub.</summary>
        /// <param name="param0">Parameter 0 for string: '{0}' is not a supported operation for EventHub.</param>
        internal static string EventHubUnsupportedOperation(object param0) {
            return string.Format(Culture, ResourceManager.GetString("EventHubUnsupportedOperation", Culture), param0);
        }
        
        /// <summary>Gets localized string like: '{0}' is not a supported transport type for EventHub. Use AMQP.</summary>
        /// <param name="param0">Parameter 0 for string: '{0}' is not a supported transport type for EventHub. Use AMQP.</param>
        internal static string EventHubUnsupportedTransport(object param0) {
            return string.Format(Culture, ResourceManager.GetString("EventHubUnsupportedTransport", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Request on entity {0} conflicted with another request</summary>
        /// <param name="param0">Parameter 0 for string: Request on entity {0} conflicted with another request</param>
        internal static string MessagingEntityRequestConflict(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessagingEntityRequestConflict", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The specified partition key '{0}' is invalid for partition '{1}'. Do not set a value for partition key or send using EventHubClient.Send.</summary>
        /// <param name="param0">Parameter 0 for string: The specified partition key '{0}' is invalid for partition '{1}'. Do not set a value for partition key or send using EventHubClient.Send.</param>
        /// <param name="param1">Parameter 1 for string: The specified partition key '{0}' is invalid for partition '{1}'. Do not set a value for partition key or send using EventHubClient.Send.</param>
        internal static string PartitionInvalidPartitionKey(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("PartitionInvalidPartitionKey", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Sending empty {0} is not a Valid Operation.</summary>
        /// <param name="param0">Parameter 0 for string: Sending empty {0} is not a Valid Operation.</param>
        internal static string CannotSendAnEmptyEvent(object param0) {
            return string.Format(Culture, ResourceManager.GetString("CannotSendAnEmptyEvent", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Expression is {0}. {2} is not a positive integer. The current invalid token is {1}</summary>
        /// <param name="param0">Parameter 0 for string: Expression is {0}. {2} is not a positive integer. The current invalid token is {1}</param>
        /// <param name="param1">Parameter 1 for string: Expression is {0}. {2} is not a positive integer. The current invalid token is {1}</param>
        /// <param name="param2">Parameter 2 for string: Expression is {0}. {2} is not a positive integer. The current invalid token is {1}</param>
        internal static string ExpressionIsNotPositiveInteger(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("ExpressionIsNotPositiveInteger", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Expression is {0}. Error trying to parse for .(prop , n) format. The current invalid token is {1}</summary>
        /// <param name="param0">Parameter 0 for string: Expression is {0}. Error trying to parse for .(prop , n) format. The current invalid token is {1}</param>
        /// <param name="param1">Parameter 1 for string: Expression is {0}. Error trying to parse for .(prop , n) format. The current invalid token is {1}</param>
        internal static string ExpressionErrorParseDotFormat(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ExpressionErrorParseDotFormat", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Expression is {0}. The expression %(prop , n) is not a valid. The current invalid token is {1}</summary>
        /// <param name="param0">Parameter 0 for string: Expression is {0}. The expression %(prop , n) is not a valid. The current invalid token is {1}</param>
        /// <param name="param1">Parameter 1 for string: Expression is {0}. The expression %(prop , n) is not a valid. The current invalid token is {1}</param>
        internal static string ExpressionErrorParsePercentFormat(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ExpressionErrorParsePercentFormat", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Expression is {0}. Missing closing parentheses. Current invalid token is {1}</summary>
        /// <param name="param0">Parameter 0 for string: Expression is {0}. Missing closing parentheses. Current invalid token is {1}</param>
        /// <param name="param1">Parameter 1 for string: Expression is {0}. Missing closing parentheses. Current invalid token is {1}</param>
        internal static string ExpressionMissingClosingParentheses(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ExpressionMissingClosingParentheses", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Expression is {0}. Missing default's end. Current invalid token is {1}</summary>
        /// <param name="param0">Parameter 0 for string: Expression is {0}. Missing default's end. Current invalid token is {1}</param>
        /// <param name="param1">Parameter 1 for string: Expression is {0}. Missing default's end. Current invalid token is {1}</param>
        internal static string ExpressionMissingDefaultEnd(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ExpressionMissingDefaultEnd", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Expression is {0}. Missing property. Current invalid token is {1}</summary>
        /// <param name="param0">Parameter 0 for string: Expression is {0}. Missing property. Current invalid token is {1}</param>
        /// <param name="param1">Parameter 1 for string: Expression is {0}. Missing property. Current invalid token is {1}</param>
        internal static string ExpressionMissingProperty(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ExpressionMissingProperty", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Expression is {0}. The character following $ or . or % should be a ( The current invalid token is {1}</summary>
        /// <param name="param0">Parameter 0 for string: Expression is {0}. The character following $ or . or % should be a ( The current invalid token is {1}</param>
        /// <param name="param1">Parameter 1 for string: Expression is {0}. The character following $ or . or % should be a ( The current invalid token is {1}</param>
        internal static string ExpressionMissingOpenParentheses(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ExpressionMissingOpenParentheses", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Expression is {0}. Literal is missing closing notation. Current invalid token is {1}</summary>
        /// <param name="param0">Parameter 0 for string: Expression is {0}. Literal is missing closing notation. Current invalid token is {1}</param>
        /// <param name="param1">Parameter 1 for string: Expression is {0}. Literal is missing closing notation. Current invalid token is {1}</param>
        internal static string ExpressionLiteralMissingClosingNotation(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ExpressionLiteralMissingClosingNotation", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Expression is {0}. Only valid composition operator is +. Current invalid token is : {1}</summary>
        /// <param name="param0">Parameter 0 for string: Expression is {0}. Only valid composition operator is +. Current invalid token is : {1}</param>
        /// <param name="param1">Parameter 1 for string: Expression is {0}. Only valid composition operator is +. Current invalid token is : {1}</param>
        internal static string ExpressionInvalidCompositionOperator(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ExpressionInvalidCompositionOperator", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Property name is of length. {0}. Maximum allowed length is {1}</summary>
        /// <param name="param0">Parameter 0 for string: Property name is of length. {0}. Maximum allowed length is {1}</param>
        /// <param name="param1">Parameter 1 for string: Property name is of length. {0}. Maximum allowed length is {1}</param>
        internal static string PropertyTooLong(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("PropertyTooLong", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Property name is {0}. Only ASCII-7 alphanumeric characters and '_' are permitted in the property name</summary>
        /// <param name="param0">Parameter 0 for string: Property name is {0}. Only ASCII-7 alphanumeric characters and '_' are permitted in the property name</param>
        internal static string PropertyNameIsBad(object param0) {
            return string.Format(Culture, ResourceManager.GetString("PropertyNameIsBad", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Expression is {0}. Token has to begin with one of these characters . % ' "" $. Current invalid token is {1}</summary>
        /// <param name="param0">Parameter 0 for string: Expression is {0}. Token has to begin with one of these characters . % ' "" $. Current invalid token is {1}</param>
        /// <param name="param1">Parameter 1 for string: Expression is {0}. Token has to begin with one of these characters . % ' "" $. Current invalid token is {1}</param>
        internal static string ExpressionInvalidTokenType(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ExpressionInvalidTokenType", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Expression is {0}. Error is it contains an invalid token : {1}</summary>
        /// <param name="param0">Parameter 0 for string: Expression is {0}. Error is it contains an invalid token : {1}</param>
        /// <param name="param1">Parameter 1 for string: Expression is {0}. Error is it contains an invalid token : {1}</param>
        internal static string ExpressionInvalidToken(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ExpressionInvalidToken", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Expression is {0}. Error is closing parenthesis is missing</summary>
        /// <param name="param0">Parameter 0 for string: Expression is {0}. Error is closing parenthesis is missing</param>
        internal static string ExpressionMissingClosingParenthesesNoToken(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ExpressionMissingClosingParenthesesNoToken", Culture), param0);
        }
        
        /// <summary>Gets localized string like: APNS Header '{0}' does not conform to Apple's guidelines that headers must begin with "apns-".</summary>
        /// <param name="param0">Parameter 0 for string: APNS Header '{0}' does not conform to Apple's guidelines that headers must begin with "apns-".</param>
        internal static string ApnsHeaderDeserializationError(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ApnsHeaderDeserializationError", Culture), param0);
        }
    }
}

