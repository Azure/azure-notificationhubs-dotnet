//----------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved. 
// Licensed under the MIT License. See License.txt in the project root for 
// license information.
//----------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.Azure.NotificationHubs
{
    public interface INotificationHubClient
    {
        bool EnableTestSend { get; }

        Task CancelNotificationAsync(string scheduledNotificationId);
        Task CancelNotificationAsync(string scheduledNotificationId, CancellationToken cancellationToken);
        Task<AdmRegistrationDescription> CreateAdmNativeRegistrationAsync(string admRegistrationId);
        Task<AdmRegistrationDescription> CreateAdmNativeRegistrationAsync(string admRegistrationId, CancellationToken cancellationToken);
        Task<AdmRegistrationDescription> CreateAdmNativeRegistrationAsync(string admRegistrationId, IEnumerable<string> tags);
        Task<AdmRegistrationDescription> CreateAdmNativeRegistrationAsync(string admRegistrationId, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<AdmTemplateRegistrationDescription> CreateAdmTemplateRegistrationAsync(string admRegistrationId, string jsonPayload);
        Task<AdmTemplateRegistrationDescription> CreateAdmTemplateRegistrationAsync(string admRegistrationId, string jsonPayload, CancellationToken cancellationToken);
        Task<AdmTemplateRegistrationDescription> CreateAdmTemplateRegistrationAsync(string admRegistrationId, string jsonPayload, IEnumerable<string> tags);
        Task<AdmTemplateRegistrationDescription> CreateAdmTemplateRegistrationAsync(string admRegistrationId, string jsonPayload, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<AppleRegistrationDescription> CreateAppleNativeRegistrationAsync(string deviceToken);
        Task<AppleRegistrationDescription> CreateAppleNativeRegistrationAsync(string deviceToken, CancellationToken cancellationToken);
        Task<AppleRegistrationDescription> CreateAppleNativeRegistrationAsync(string deviceToken, IEnumerable<string> tags);
        Task<AppleRegistrationDescription> CreateAppleNativeRegistrationAsync(string deviceToken, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<AppleTemplateRegistrationDescription> CreateAppleTemplateRegistrationAsync(string deviceToken, string jsonPayload);
        Task<AppleTemplateRegistrationDescription> CreateAppleTemplateRegistrationAsync(string deviceToken, string jsonPayload, CancellationToken cancellationToken);
        Task<AppleTemplateRegistrationDescription> CreateAppleTemplateRegistrationAsync(string deviceToken, string jsonPayload, IEnumerable<string> tags);
        Task<AppleTemplateRegistrationDescription> CreateAppleTemplateRegistrationAsync(string deviceToken, string jsonPayload, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<BaiduRegistrationDescription> CreateBaiduNativeRegistrationAsync(string userId, string channelId);
        Task<BaiduRegistrationDescription> CreateBaiduNativeRegistrationAsync(string userId, string channelId, IEnumerable<string> tags);
        Task<BaiduTemplateRegistrationDescription> CreateBaiduTemplateRegistrationAsync(string userId, string channelId, string jsonPayload);
        Task<BaiduTemplateRegistrationDescription> CreateBaiduTemplateRegistrationAsync(string userId, string channelId, string jsonPayload, IEnumerable<string> tags);
        Task<FcmRegistrationDescription> CreateFcmNativeRegistrationAsync(string fcmRegistrationId);
        Task<FcmRegistrationDescription> CreateFcmNativeRegistrationAsync(string fcmRegistrationId, CancellationToken cancellationToken);
        Task<FcmRegistrationDescription> CreateFcmNativeRegistrationAsync(string fcmRegistrationId, IEnumerable<string> tags);
        Task<FcmRegistrationDescription> CreateFcmNativeRegistrationAsync(string fcmRegistrationId, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<FcmTemplateRegistrationDescription> CreateFcmTemplateRegistrationAsync(string fcmRegistrationId, string jsonPayload);
        Task<FcmTemplateRegistrationDescription> CreateFcmTemplateRegistrationAsync(string fcmRegistrationId, string jsonPayload, CancellationToken cancellationToken);
        Task<FcmTemplateRegistrationDescription> CreateFcmTemplateRegistrationAsync(string fcmRegistrationId, string jsonPayload, IEnumerable<string> tags);
        Task<FcmTemplateRegistrationDescription> CreateFcmTemplateRegistrationAsync(string fcmRegistrationId, string jsonPayload, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<MpnsRegistrationDescription> CreateMpnsNativeRegistrationAsync(string channelUri);
        Task<MpnsRegistrationDescription> CreateMpnsNativeRegistrationAsync(string channelUri, IEnumerable<string> tags);
        Task<MpnsTemplateRegistrationDescription> CreateMpnsTemplateRegistrationAsync(string channelUri, string xmlTemplate);
        Task<MpnsTemplateRegistrationDescription> CreateMpnsTemplateRegistrationAsync(string channelUri, string xmlTemplate, IEnumerable<string> tags);
        void CreateOrUpdateInstallation(Installation installation);
        Task CreateOrUpdateInstallationAsync(Installation installation);
        Task CreateOrUpdateInstallationAsync(Installation installation, CancellationToken cancellationToken);
        Task<T> CreateOrUpdateRegistrationAsync<T>(T registration) where T : RegistrationDescription;
        Task<T> CreateOrUpdateRegistrationAsync<T>(T registration, CancellationToken cancellationToken) where T : RegistrationDescription;
        Task<T> CreateRegistrationAsync<T>(T registration) where T : RegistrationDescription;
        Task<T> CreateRegistrationAsync<T>(T registration, CancellationToken cancellationToken) where T : RegistrationDescription;
        Task<string> CreateRegistrationIdAsync();
        Task<string> CreateRegistrationIdAsync(CancellationToken cancellationToken);
        Task<WindowsRegistrationDescription> CreateWindowsNativeRegistrationAsync(string channelUri);
        Task<WindowsRegistrationDescription> CreateWindowsNativeRegistrationAsync(string channelUri, CancellationToken cancellationToken);
        Task<WindowsRegistrationDescription> CreateWindowsNativeRegistrationAsync(string channelUri, IEnumerable<string> tags);
        Task<WindowsRegistrationDescription> CreateWindowsNativeRegistrationAsync(string channelUri, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<WindowsTemplateRegistrationDescription> CreateWindowsTemplateRegistrationAsync(string channelUri, string xmlTemplate);
        Task<WindowsTemplateRegistrationDescription> CreateWindowsTemplateRegistrationAsync(string channelUri, string xmlTemplate, CancellationToken cancellationToken);
        Task<WindowsTemplateRegistrationDescription> CreateWindowsTemplateRegistrationAsync(string channelUri, string xmlTemplate, IEnumerable<string> tags);
        Task<WindowsTemplateRegistrationDescription> CreateWindowsTemplateRegistrationAsync(string channelUri, string xmlTemplate, IEnumerable<string> tags, CancellationToken cancellationToken);
        void DeleteInstallation(string installationId);
        Task DeleteInstallationAsync(string installationId);
        Task DeleteInstallationAsync(string installationId, CancellationToken cancellationToken);
        Task DeleteRegistrationAsync(RegistrationDescription registration);
        Task DeleteRegistrationAsync(RegistrationDescription registration, CancellationToken cancellationToken);
        Task DeleteRegistrationAsync(string registrationId);
        Task DeleteRegistrationAsync(string registrationId, CancellationToken cancellationToken);
        Task DeleteRegistrationAsync(string registrationId, string etag);
        Task DeleteRegistrationAsync(string registrationId, string etag, CancellationToken cancellationToken);
        Task DeleteRegistrationsByChannelAsync(string pnsHandle);
        Task DeleteRegistrationsByChannelAsync(string pnsHandle, CancellationToken cancellationToken);
        Task<CollectionQueryResult<RegistrationDescription>> GetAllRegistrationsAsync(int top);
        Task<CollectionQueryResult<RegistrationDescription>> GetAllRegistrationsAsync(int top, CancellationToken cancellationToken);
        Task<CollectionQueryResult<RegistrationDescription>> GetAllRegistrationsAsync(string continuationToken, int top);
        Task<CollectionQueryResult<RegistrationDescription>> GetAllRegistrationsAsync(string continuationToken, int top, CancellationToken cancellationToken);
        Uri GetBaseUri();
        Task<Uri> GetFeedbackContainerUriAsync();
        Task<Uri> GetFeedbackContainerUriAsync(CancellationToken cancellationToken);
        Installation GetInstallation(string installationId);
        Task<Installation> GetInstallationAsync(string installationId);
        Task<Installation> GetInstallationAsync(string installationId, CancellationToken cancellationToken);
        Task<NotificationHubJob> GetNotificationHubJobAsync(string jobId);
        Task<NotificationHubJob> GetNotificationHubJobAsync(string jobId, CancellationToken cancellationToken);
        Task<IEnumerable<NotificationHubJob>> GetNotificationHubJobsAsync();
        Task<IEnumerable<NotificationHubJob>> GetNotificationHubJobsAsync(CancellationToken cancellationToken);
        Task<NotificationDetails> GetNotificationOutcomeDetailsAsync(string notificationId);
        Task<NotificationDetails> GetNotificationOutcomeDetailsAsync(string notificationId, CancellationToken cancellationToken);
        Task<TRegistrationDescription> GetRegistrationAsync<TRegistrationDescription>(string registrationId) where TRegistrationDescription : RegistrationDescription;
        Task<TRegistrationDescription> GetRegistrationAsync<TRegistrationDescription>(string registrationId, CancellationToken cancellationToken) where TRegistrationDescription : RegistrationDescription;
        Task<CollectionQueryResult<RegistrationDescription>> GetRegistrationsByChannelAsync(string pnsHandle, int top);
        Task<CollectionQueryResult<RegistrationDescription>> GetRegistrationsByChannelAsync(string pnsHandle, int top, CancellationToken cancellationToken);
        Task<CollectionQueryResult<RegistrationDescription>> GetRegistrationsByChannelAsync(string pnsHandle, string continuationToken, int top);
        Task<CollectionQueryResult<RegistrationDescription>> GetRegistrationsByChannelAsync(string pnsHandle, string continuationToken, int top, CancellationToken cancellationToken);
        Task<CollectionQueryResult<RegistrationDescription>> GetRegistrationsByTagAsync(string tag, int top);
        Task<CollectionQueryResult<RegistrationDescription>> GetRegistrationsByTagAsync(string tag, int top, CancellationToken cancellationToken);
        Task<CollectionQueryResult<RegistrationDescription>> GetRegistrationsByTagAsync(string tag, string continuationToken, int top);
        Task<CollectionQueryResult<RegistrationDescription>> GetRegistrationsByTagAsync(string tag, string continuationToken, int top, CancellationToken cancellationToken);
        bool InstallationExists(string installationId);
        Task<bool> InstallationExistsAsync(string installationId);
        Task<bool> InstallationExistsAsync(string installationId, CancellationToken cancellationToken);
        void PatchInstallation(string installationId, IList<PartialUpdateOperation> operations);
        Task PatchInstallationAsync(string installationId, IList<PartialUpdateOperation> operations);
        Task PatchInstallationAsync(string installationId, IList<PartialUpdateOperation> operations, CancellationToken cancellationToken);
        Task<bool> RegistrationExistsAsync(string registrationId);
        Task<bool> RegistrationExistsAsync(string registrationId, CancellationToken cancellationToken);
        Task<ScheduledNotification> ScheduleNotificationAsync(Notification notification, DateTimeOffset scheduledTime);
        Task<ScheduledNotification> ScheduleNotificationAsync(Notification notification, DateTimeOffset scheduledTime, CancellationToken cancellationToken);
        Task<ScheduledNotification> ScheduleNotificationAsync(Notification notification, DateTimeOffset scheduledTime, IEnumerable<string> tags);
        Task<ScheduledNotification> ScheduleNotificationAsync(Notification notification, DateTimeOffset scheduledTime, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<ScheduledNotification> ScheduleNotificationAsync(Notification notification, DateTimeOffset scheduledTime, string tagExpression);
        Task<ScheduledNotification> ScheduleNotificationAsync(Notification notification, DateTimeOffset scheduledTime, string tagExpression, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendAdmNativeNotificationAsync(string jsonPayload);
        Task<NotificationOutcome> SendAdmNativeNotificationAsync(string jsonPayload, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendAdmNativeNotificationAsync(string jsonPayload, IEnumerable<string> tags);
        Task<NotificationOutcome> SendAdmNativeNotificationAsync(string jsonPayload, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendAdmNativeNotificationAsync(string jsonPayload, string tagExpression);
        Task<NotificationOutcome> SendAdmNativeNotificationAsync(string jsonPayload, string tagExpression, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendAppleNativeNotificationAsync(string jsonPayload);
        Task<NotificationOutcome> SendAppleNativeNotificationAsync(string jsonPayload, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendAppleNativeNotificationAsync(string jsonPayload, IEnumerable<string> tags);
        Task<NotificationOutcome> SendAppleNativeNotificationAsync(string jsonPayload, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendAppleNativeNotificationAsync(string jsonPayload, string tagExpression);
        Task<NotificationOutcome> SendAppleNativeNotificationAsync(string jsonPayload, string tagExpression, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendBaiduNativeNotificationAsync(string message);
        Task<NotificationOutcome> SendBaiduNativeNotificationAsync(string message, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendBaiduNativeNotificationAsync(string message, IEnumerable<string> tags);
        Task<NotificationOutcome> SendBaiduNativeNotificationAsync(string message, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendBaiduNativeNotificationAsync(string message, string tagExpression);
        Task<NotificationOutcome> SendBaiduNativeNotificationAsync(string message, string tagExpression, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendDirectNotificationAsync(Notification notification, IList<string> deviceHandles);
        Task<NotificationOutcome> SendDirectNotificationAsync(Notification notification, IList<string> deviceHandles, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendDirectNotificationAsync(Notification notification, string deviceHandle);
        Task<NotificationOutcome> SendDirectNotificationAsync(Notification notification, string deviceHandle, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendFcmNativeNotificationAsync(string jsonPayload);
        Task<NotificationOutcome> SendFcmNativeNotificationAsync(string jsonPayload, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendFcmNativeNotificationAsync(string jsonPayload, IEnumerable<string> tags);
        Task<NotificationOutcome> SendFcmNativeNotificationAsync(string jsonPayload, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendFcmNativeNotificationAsync(string jsonPayload, string tagExpression);
        Task<NotificationOutcome> SendFcmNativeNotificationAsync(string jsonPayload, string tagExpression, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendMpnsNativeNotificationAsync(string nativePayload);
        Task<NotificationOutcome> SendMpnsNativeNotificationAsync(string nativePayload, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendMpnsNativeNotificationAsync(string nativePayload, IEnumerable<string> tags);
        Task<NotificationOutcome> SendMpnsNativeNotificationAsync(string nativePayload, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendMpnsNativeNotificationAsync(string nativePayload, string tagExpression);
        Task<NotificationOutcome> SendMpnsNativeNotificationAsync(string nativePayload, string tagExpression, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendNotificationAsync(Notification notification);
        Task<NotificationOutcome> SendNotificationAsync(Notification notification, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendNotificationAsync(Notification notification, IEnumerable<string> tags);
        Task<NotificationOutcome> SendNotificationAsync(Notification notification, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendNotificationAsync(Notification notification, string tagExpression);
        Task<NotificationOutcome> SendNotificationAsync(Notification notification, string tagExpression, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendTemplateNotificationAsync(IDictionary<string, string> properties);
        Task<NotificationOutcome> SendTemplateNotificationAsync(IDictionary<string, string> properties, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendTemplateNotificationAsync(IDictionary<string, string> properties, IEnumerable<string> tags);
        Task<NotificationOutcome> SendTemplateNotificationAsync(IDictionary<string, string> properties, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendTemplateNotificationAsync(IDictionary<string, string> properties, string tagExpression);
        Task<NotificationOutcome> SendTemplateNotificationAsync(IDictionary<string, string> properties, string tagExpression, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendWindowsNativeNotificationAsync(string windowsNativePayload);
        Task<NotificationOutcome> SendWindowsNativeNotificationAsync(string windowsNativePayload, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendWindowsNativeNotificationAsync(string windowsNativePayload, IEnumerable<string> tags);
        Task<NotificationOutcome> SendWindowsNativeNotificationAsync(string windowsNativePayload, IEnumerable<string> tags, CancellationToken cancellationToken);
        Task<NotificationOutcome> SendWindowsNativeNotificationAsync(string windowsNativePayload, string tagExpression);
        Task<NotificationOutcome> SendWindowsNativeNotificationAsync(string windowsNativePayload, string tagExpression, CancellationToken cancellationToken);
        Task<NotificationHubJob> SubmitNotificationHubJobAsync(NotificationHubJob job);
        Task<NotificationHubJob> SubmitNotificationHubJobAsync(NotificationHubJob job, CancellationToken cancellationToken);
        Task<T> UpdateRegistrationAsync<T>(T registration) where T : RegistrationDescription;
        Task<T> UpdateRegistrationAsync<T>(T registration, CancellationToken cancellationToken) where T : RegistrationDescription;
    }
}